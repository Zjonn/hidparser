import { toHex, joinHex, readIntLE, errDataExpected, errUnexpectedEnd } from "./utils.js";

const usagePages = {
    0x00: "Undefined",
    0x01: "Generic Desktop Page",
    0x02: "Simulation Controls Page",
    0x03: "VR Controls Page",
    0x04: "Sport Controls Page",
    0x05: "Game Controls Page",
    0x06: "Generic Device Controls Page",
    0x07: "Keyboard/Keypad Page",
    0x08: "LED Page",
    0x09: "Button Page",
    0x0A: "Ordinal Page",
    0x0B: "Telephony Device Page",
    0x0C: "Consumer Page",
    0x0D: "Digitizers Page",
    0x0E: "Haptics Page",
    0x0F: "Physical Input Device Page",
    0x10: "Unicode Page",
    0x11: "SoC Page",
    0x12: "Eye and Head Trackers Page",
    0x14: "Auxiliary Display Page",
    0x20: "Sensors Page",
    0x40: "Medical Instrument Page",
    0x41: "Braille Display Page",
    0x59: "Lighting and Illumination Page",
    0x80: "Monitor Page",
    0x81: "Monitor Enumerated Page",
    0x82: "VESA Virtual Controls Page",
    0x84: "Power Page",
    0x85: "Battery System Page",
    0x8C: "Barcode Scanner Page",
    0x8D: "Scale Page",
    0x8E: "Magnetic Stripe Reader Page",
    0x90: "Camera Control Page",
    0x91: "Arcade Page",
    0x92: "Gaming Device Page",
    0xF1D0: "FIDO Alliance Page",
};

const collectionTypes = {
    0x00: "Physical",
    0x01: "Application",
    0x02: "Logical",
    0x03: "Report",
    0x04: "Named Array",
    0x05: "Usage Switch",
    0x06: "Usage Modifier"
};

function getUsage(usagePage, usageId) {
    if (usagePage === null) {
        return null
    }

    switch (usagePage) {
        case 0x01:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "Pointer";
                case 0x02: return "Mouse";
                case 0x04: return "Joystick";
                case 0x05: return "Gamepad";
                case 0x06: return "Keyboard";
                case 0x07: return "Keypad";
                case 0x08: return "Multi-axis Controller";
                case 0x09: return "Tablet PC System Controls";
                case 0x0A: return "Water Cooling Device";
                case 0x0B: return "Computer Chassis Device";
                case 0x0C: return "Wireless Radio Controls";
                case 0x0D: return "Portable Device Control";
                case 0x0E: return "System Multi-Axis Controller";
                case 0x0F: return "Spatial Controller";
                case 0x10: return "Assistive Control";
                case 0x11: return "Device Dock";
                case 0x12: return "Dockable Device";
                case 0x13: return "Call State Management Control";
                case 0x30: return "X";
                case 0x31: return "Y";
                case 0x32: return "Z";
                case 0x33: return "Rx";
                case 0x34: return "Ry";
                case 0x35: return "Rz";
                case 0x36: return "Slider";
                case 0x37: return "Dial";
                case 0x38: return "Wheel";
                case 0x39: return "Hat Switch";
                case 0x3A: return "Counted Buffer";
                case 0x3B: return "Byte Count";
                case 0x3C: return "Motion Wakeup";
                case 0x3D: return "Start";
                case 0x3E: return "Select";
                case 0x40: return "Vx";
                case 0x41: return "Vy";
                case 0x42: return "Vz";
                case 0x43: return "Vbrx";
                case 0x44: return "Vbry";
                case 0x45: return "Vbrz";
                case 0x46: return "Vno";
                case 0x47: return "Feature Notification";
                case 0x48: return "Resolution Multiplier";
                case 0x49: return "Qx";
                case 0x4A: return "Qy";
                case 0x4B: return "Qz";
                case 0x4C: return "Qw";
                case 0x80: return "System Control";
                case 0x81: return "System Power Down";
                case 0x82: return "System Sleep";
                case 0x83: return "System Wake Up";
                case 0x84: return "System Context Menu";
                case 0x85: return "System Main Menu";
                case 0x86: return "System App Menu";
                case 0x87: return "System Menu Help";
                case 0x88: return "System Menu Exit";
                case 0x89: return "System Menu Select";
                case 0x8A: return "System Menu Right";
                case 0x8B: return "System Menu Left";
                case 0x8C: return "System Menu Up";
                case 0x8D: return "System Menu Down";
                case 0x8E: return "System Cold Restart";
                case 0x8F: return "System Warm Restart";
                case 0x90: return "D-pad Up";
                case 0x91: return "D-pad Down";
                case 0x92: return "D-pad Right";
                case 0x93: return "D-pad Left";
                case 0x94: return "Index Trigger";
                case 0x95: return "Palm Trigger";
                case 0x96: return "Thumbstick";
                case 0x97: return "System Function Shift";
                case 0x98: return "System Function Shift Lock";
                case 0x99: return "System Function Shift Lock Indicator";
                case 0x9A: return "System Dismiss Notification";
                case 0x9B: return "System Do Not Disturb";
                case 0xA0: return "System Dock";
                case 0xA1: return "System Undock";
                case 0xA2: return "System Setup";
                case 0xA3: return "System Break";
                case 0xA4: return "System Debugger Break";
                case 0xA5: return "Application Break";
                case 0xA6: return "Application Debugger Break";
                case 0xA7: return "System Speaker Mute";
                case 0xA8: return "System Hibernate";
                case 0xA9: return "System Microphone Mute";
                case 0xAA: return "System Accessibility Binding";
                case 0xB0: return "System Display Invert";
                case 0xB1: return "System Display Internal";
                case 0xB2: return "System Display External";
                case 0xB3: return "System Display Both";
                case 0xB4: return "System Display Dual";
                case 0xB5: return "System Display Toggle Int/Ext Mode";
                case 0xB6: return "System Display Swap Primary/Secondary";
                case 0xB7: return "System Display Toggle LCD Autoscale";
                case 0xC0: return "Sensor Zone";
                case 0xC1: return "RPM";
                case 0xC2: return "Coolant Level";
                case 0xC3: return "Coolant Critical Level";
                case 0xC4: return "Coolant Pump";
                case 0xC5: return "Chassis Enclosure";
                case 0xC6: return "Wireless Radio Button";
                case 0xC7: return "Wireless Radio LED";
                case 0xC8: return "Wireless Radio Slider Switch";
                case 0xC9: return "System Display Rotation Lock Button";
                case 0xCA: return "System Display Rotation Lock Slider Switch";
                case 0xCB: return "Control Enable";
                case 0xD0: return "Dockable Device Unique ID";
                case 0xD1: return "Dockable Device Vendor ID";
                case 0xD2: return "Dockable Device Primary Usage Page";
                case 0xD3: return "Dockable Device Primary Usage ID";
                case 0xD4: return "Dockable Device Docking State";
                case 0xD5: return "Dockable Device Display Occlusion";
                case 0xD6: return "Dockable Device Object Type";
                case 0xE0: return "Call Active LED";
                case 0xE1: return "Call Mute Toggle";
                case 0xE2: return "Call Mute LED";
                default:
                    return "Reserved"
            };
        case 0x02:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "Flight Simulation Device";
                case 0x02: return "Automobile Simulation Device";
                case 0x03: return "Tank Simulation Device";
                case 0x04: return "Spaceship Simulation Device";
                case 0x05: return "Submarine Simulation Device";
                case 0x06: return "Sailing Simulation Device";
                case 0x07: return "Motorcycle Simulation Device";
                case 0x08: return "Sports Simulation Device";
                case 0x09: return "Airplane Simulation Device";
                case 0x0A: return "Helicopter Simulation Device";
                case 0x0B: return "Magic Carpet Simulation Device";
                case 0x0C: return "Bicycle Simulation Device";
                case 0x20: return "Flight Control Stick";
                case 0x21: return "Flight Stick";
                case 0x22: return "Cyclic Control";
                case 0x23: return "Cyclic Trim";
                case 0x24: return "Flight Yoke";
                case 0x25: return "Track Control";
                case 0xB0: return "Aileron";
                case 0xB1: return "Aileron Trim";
                case 0xB2: return "Anti-Torque Control";
                case 0xB3: return "Autopilot Enable";
                case 0xB4: return "Chaff Release";
                case 0xB5: return "Collective Control";
                case 0xB6: return "Dive Brake";
                case 0xB7: return "Electronic Countermeasures";
                case 0xB8: return "Elevator";
                case 0xB9: return "Elevator Trim";
                case 0xBA: return "Rudder";
                case 0xBB: return "Throttle";
                case 0xBC: return "Flight Communications";
                case 0xBD: return "Flare Release";
                case 0xBE: return "Landing Gear";
                case 0xBF: return "Toe Brake";
                case 0xC0: return "Trigger";
                case 0xC1: return "Weapons Arm";
                case 0xC2: return "Weapons Select";
                case 0x61: return "";
                case 0xC3: return "Wing Flaps";
                case 0xC4: return "Accelerator";
                case 0xC5: return "Brake";
                case 0xC6: return "Clutch";
                case 0xC7: return "Shifter";
                case 0xC8: return "Steering";
                case 0xC9: return "Turret Direction";
                case 0xCA: return "Barrel Elevation";
                case 0xCB: return "Dive Plane";
                case 0xCC: return "Ballast";
                case 0xCD: return "Bicycle Crank";
                case 0xCE: return "Handle Bars";
                case 0xCF: return "Front Brake";
                case 0xD0: return "Rear Brake";
                default: return "Reserved";
            }
        case 0x03:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "Belt";
                case 0x02: return "Body Suit";
                case 0x03: return "Flexor";
                case 0x04: return "Glove";
                case 0x05: return "Head Tracker";
                case 0x06: return "Head Mounted Display";
                case 0x07: return "Hand Tracker";
                case 0x08: return "Oculometer";
                case 0x09: return "Vest";
                case 0x0A: return "Animatronic Device";
                case 0x20: return "Stereo Enable";
                case 0x21: return "Display Enable";
                default: return "Reserved";
            }
        case 0x04:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "Baseball Bat";
                case 0x02: return "Golf Club";
                case 0x03: return "Rowing Machine";
                case 0x04: return "Treadmill";
                case 0x30: return "Oar";
                case 0x31: return "Slope";
                case 0x32: return "Rate";
                case 0x33: return "Stick Speed";
                case 0x34: return "Stick Face Angle";
                case 0x35: return "Stick Heel Toe";
                case 0x36: return "Stick Follow Through";
                case 0x37: return "Stick Tempo";
                case 0x38: return "Stick Type";
                case 0x39: return "Stick Height";
                case 0x50: return "Putter";
                case 0x51: return "1 Iron";
                case 0x52: return "2 Iron";
                case 0x53: return "3 Iron";
                case 0x54: return "4 Iron";
                case 0x55: return "5 Iron";
                case 0x56: return "6 Iron";
                case 0x57: return "7 Iron";
                case 0x58: return "8 Iron";
                case 0x59: return "9 Iron";
                case 0x5A: return "10 Iron";
                case 0x5B: return "11 Iron";
                case 0x5C: return "Sand Wedge";
                case 0x5D: return "Loft Wedge";
                case 0x5E: return "Power Wedge";
                case 0x5F: return "1 Wood";
                case 0x60: return "3 Wood";
                case 0x61: return "5 Wood";
                case 0x62: return "7 Wood";
                case 0x63: return "9 Wood";
                default: return "Reserved";
            }
        case 0x05:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "3D Game Controller";
                case 0x02: return "Pinball Device";
                case 0x03: return "Gun Device";
                case 0x20: return "Point of View";
                case 0x21: return "Turn Right Left";
                case 0x22: return "Pitch Forward Backward";
                case 0x23: return "Roll Right Left";
                case 0x24: return "Move Right Left";
                case 0x25: return "Move Forward Backward";
                case 0x26: return "Move Up Down";
                case 0x27: return "Lean Right Left";
                case 0x28: return "Lean Forward Backward";
                case 0x29: return "Height of POV";
                case 0x2A: return "Flipper";
                case 0x2B: return "Secondary Flipper";
                case 0x2C: return "Bump";
                case 0x2D: return "New Game";
                case 0x2E: return "Shoot Ball";
                case 0x2F: return "Player";
                case 0x30: return "Gun Bolt";
                case 0x31: return "Gun Clip";
                case 0x32: return "Gun Selector";
                case 0x33: return "Gun Single Shot";
                case 0x34: return "Gun Burst";
                case 0x35: return "Gun Automatic";
                case 0x36: return "Gun Safety";
                case 0x37: return "Gamepad Fire Jump";
                case 0x39: return "Gamepad Trigger";
                case 0x3A: return "Form-fitting Gamepad";
                default: return "Reserved";
            }
        case 0x06:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "Background Nonuser Controls";
                case 0x20: return "Battery Strength";
                case 0x21: return "Wireless Channel";
                case 0x22: return "Wireless ID";
                case 0x23: return "Discover Wireless Control";
                case 0x24: return "Security Code Character Entered";
                case 0x25: return "Security Code Character Erased";
                case 0x26: return "Security Code Cleared";
                case 0x27: return "Sequence ID";
                case 0x28: return "Sequence ID Reset";
                case 0x29: return "RF Signal Strength";
                case 0x2A: return "Software Version";
                case 0x2B: return "Protocol Version";
                case 0x2C: return "Hardware Version";
                case 0x2D: return "Major";
                case 0x2E: return "Minor";
                case 0x2F: return "Revision";
                case 0x30: return "Handedness";
                case 0x31: return "Either Hand";
                case 0x32: return "Left Hand";
                case 0x33: return "Right Hand";
                case 0x34: return "Both Hands";
                case 0x40: return "Grip Pose Offset";
                case 0x41: return "Pointer Pose Offset";
                default: return "Reserved";
            }
        case 0x07:
            switch (usageId) {
                case 0x01: return "Keyboard ErrorRollOver";
                case 0x02: return "Keyboard POSTFail";
                case 0x03: return "Keyboard ErrorUndefined";
                case 0x04: return "Keyboard a and A";
                case 0x05: return "Keyboard b and B";
                case 0x06: return "Keyboard c and C";
                case 0x07: return "Keyboard d and D";
                case 0x08: return "Keyboard e and E";
                case 0x09: return "Keyboard f and F";
                case 0x0A: return "Keyboard g and G";
                case 0x0B: return "Keyboard h and H";
                case 0x0C: return "Keyboard i and I";
                case 0x0D: return "Keyboard j and J";
                case 0x0E: return "Keyboard k and K";
                case 0x0F: return "Keyboard l and L";
                case 0x10: return "Keyboard m and M";
                case 0x11: return "Keyboard n and N";
                case 0x12: return "Keyboard o and O";
                case 0x13: return "Keyboard p and P";
                case 0x14: return "Keyboard q and Q";
                case 0x15: return "Keyboard r and R";
                case 0x16: return "Keyboard s and S";
                case 0x17: return "Keyboard t and T";
                case 0x18: return "Keyboard u and U";
                case 0x19: return "Keyboard v and V";
                case 0x1A: return "Keyboard w and W2";
                case 0x1B: return "Keyboard x and X";
                case 0x1C: return "Keyboard y and Y";
                case 0x1D: return "Keyboard z and Z";
                case 0x1E: return "Keyboard 1 and !";
                case 0x1F: return "Keyboard 2 and @";
                case 0x20: return "Keyboard 3 and #";
                case 0x21: return "Keyboard 4 and $";
                case 0x22: return "Keyboard 5 and %";
                case 0x23: return "Keyboard 6 and ∧";
                case 0x24: return "Keyboard 7 and &";
                case 0x25: return "Keyboard 8 and *";
                case 0x26: return "Keyboard 9 and (";
                case 0x27: return "Keyboard 0 and )";
                case 0x28: return "Keyboard Return (ENTER)3";
                case 0x29: return "Keyboard ESCAPE";
                case 0x2A: return "Keyboard DELETE (Backspace)4";
                case 0x2B: return "Keyboard Tab";
                case 0x2C: return "Keyboard Spacebar";
                case 0x2D: return "Keyboard - and _";
                case 0x2E: return "Keyboard = and +";
                case 0x2F: return "Keyboard [ and {";
                case 0x30: return "Keyboard ] and }";
                case 0x31: return "Keyboard \\ and |";
                case 0x32: return "Keyboard Non-US # and ˜";
                case 0x33: return "Keyboard ; and :";
                case 0x34: return "Keyboard ' and \"";
                case 0x35: return "Keyboard Grave Accent and Tilde2";
                case 0x36: return "Keyboard , and <";
                case 0x37: return "Keyboard . and >";
                case 0x38: return "Keyboard and ?";
                case 0x39: return "Keyboard Caps Lock6";
                case 0x3A: return "Keyboard F1";
                case 0x3B: return "Keyboard F2";
                case 0x3C: return "Keyboard F3";
                case 0x3D: return "Keyboard F4";
                case 0x3E: return "Keyboard F5";
                case 0x3F: return "Keyboard F6";
                case 0x40: return "Keyboard F7";
                case 0x41: return "Keyboard F8";
                case 0x42: return "Keyboard F9";
                case 0x43: return "Keyboard F10";
                case 0x44: return "Keyboard F11";
                case 0x45: return "Keyboard F12";
                case 0x46: return "Keyboard PrintScreen";
                case 0x47: return "Keyboard Scroll Lock";
                case 0x48: return "Keyboard Pause";
                case 0x49: return "Keyboard Insert";
                case 0x4A: return "Keyboard Home";
                case 0x4B: return "Keyboard PageUp";
                case 0x4C: return "Keyboard Delete Forward,8";
                case 0x4D: return "Keyboard End";
                case 0x4E: return "Keyboard PageDown";
                case 0x4F: return "Keyboard RightArrow";
                case 0x50: return "Keyboard LeftArrow";
                case 0x51: return "Keyboard DownArrow";
                case 0x52: return "Keyboard UpArrow";
                case 0x53: return "Keypad Num Lock and Clear";
                case 0x54: return "Keypad";
                case 0x55: return "Keypad *";
                case 0x56: return "Keypad -";
                case 0x57: return "Keypad +";
                case 0x58: return "Keypad ENTER";
                case 0x59: return "Keypad 1 and End";
                case 0x5A: return "Keypad 2 and Down Arrow";
                case 0x5B: return "Keypad 3 and PageDn";
                case 0x5C: return "Keypad 4 and Left Arrow";
                case 0x5D: return "Keypad 5";
                case 0x5E: return "Keypad 6 and Right Arrow";
                case 0x5F: return "Keypad 7 and Home";
                case 0x60: return "Keypad 8 and Up Arrow";
                case 0x61: return "Keypad 9 and PageUp";
                case 0x62: return "Keypad 0 and Insert";
                case 0x63: return "Keypad . and Delete";
                case 0x64: return "Keyboard Non-US \and |";
                case 0x65: return "Keyboard Application";
                case 0x66: return "Keyboard Power";
                case 0x67: return "Keypad =";
                case 0x68: return "Keyboard F13";
                case 0x69: return "Keyboard F14";
                case 0x6A: return "Keyboard F15";
                case 0x6B: return "Keyboard F16";
                case 0x6C: return "Keyboard F17";
                case 0x6D: return "Keyboard F18";
                case 0x6E: return "Keyboard F19";
                case 0x6F: return "Keyboard F20";
                case 0x70: return "Keyboard F21";
                case 0x71: return "Keyboard F22";
                case 0x72: return "Keyboard F23";
                case 0x73: return "Keyboard F24";
                case 0x74: return "Keyboard Execute";
                case 0x75: return "Keyboard Help";
                case 0x76: return "Keyboard Menu";
                case 0x77: return "Keyboard Select";
                case 0x78: return "Keyboard Stop";
                case 0x79: return "Keyboard Again";
                case 0x7A: return "Keyboard Undo";
                case 0x7B: return "Keyboard Cut";
                case 0x7C: return "Keyboard Copy";
                case 0x7D: return "Keyboard Paste";
                case 0x7E: return "Keyboard Find";
                case 0x7F: return "Keyboard Mute";
                case 0x80: return "Keyboard Volume Up";
                case 0x81: return "Keyboard Volume Down";
                case 0x82: return "Keyboard Locking Caps Lock";
                case 0x83: return "Keyboard Locking Num Lock";
                case 0x84: return "Keyboard Locking Scroll Lock";
                case 0x85: return "Keypad Comma";
                case 0x86: return "Keypad Equal Sign";
                case 0x87: return "Keyboard International1";
                case 0x88: return "Keyboard International2";
                case 0x89: return "Keyboard International3";
                case 0x8A: return "Keyboard International4";
                case 0x8B: return "Keyboard International5";
                case 0x8C: return "Keyboard International6";
                case 0x8D: return "Keyboard International7";
                case 0x8E: return "Keyboard International8";
                case 0x8F: return "Keyboard International9";
                case 0x90: return "Keyboard LANG1";
                case 0x91: return "Keyboard LANG2";
                case 0x92: return "Keyboard LANG3";
                case 0x93: return "Keyboard LANG4";
                case 0x94: return "Keyboard LANG5";
                case 0x95: return "Keyboard LANG6";
                case 0x96: return "Keyboard LANG7";
                case 0x97: return "Keyboard LANG8";
                case 0x98: return "Keyboard LANG9";
                case 0x99: return "Keyboard Alternate Erase";
                case 0x9A: return "Keyboard SysReq Attention";
                case 0x9B: return "Keyboard Cancel";
                case 0x9C: return "Keyboard Clear";
                case 0x9D: return "Keyboard Prior";
                case 0x9E: return "Keyboard Return";
                case 0x9F: return "Keyboard Separator";
                case 0xA0: return "Keyboard Out";
                case 0xA1: return "Keyboard Oper";
                case 0xA2: return "Keyboard Clear Again";
                case 0xA3: return "Keyboard CrSel Props";
                case 0xA4: return "Keyboard ExSel";
                case 0xB0: return "Keypad 00";
                case 0xB1: return "Keypad 000";
                case 0xB2: return "Thousands Separator";
                case 0xB3: return "Decimal Separator";
                case 0xB4: return "Currency Unit";
                case 0xB5: return "Currency Sub-unit";
                case 0xB6: return "Keypad (";
                case 0xB7: return "Keypad )";
                case 0xB8: return "Keypad {";
                case 0xB9: return "Keypad }";
                case 0xBA: return "Keypad Tab";
                case 0xBB: return "Keypad Backspace";
                case 0xBC: return "Keypad A";
                case 0xBD: return "Keypad B";
                case 0xBE: return "Keypad C";
                case 0xBF: return "Keypad D";
                case 0xC0: return "Keypad E";
                case 0xC1: return "Keypad F";
                case 0xC2: return "Keypad XOR";
                case 0xC3: return "Keypad ∧";
                case 0xC4: return "Keypad %";
                case 0xC5: return "Keypad <";
                case 0xC6: return "Keypad >";
                case 0xC7: return "Keypad &";
                case 0xC8: return "Keypad &&";
                case 0xC9: return "Keypad |";
                case 0xCA: return "Keypad ||";
                case 0xCB: return "Keypad :";
                case 0xCC: return "Keypad #";
                case 0xCD: return "Keypad Space";
                case 0xCE: return "Keypad @";
                case 0xCF: return "Keypad !";
                case 0xD0: return "Keypad Memory Store";
                case 0xD1: return "Keypad Memory Recall";
                case 0xD2: return "Keypad Memory Clear";
                case 0xD3: return "Keypad Memory Add";
                case 0xD4: return "Keypad Memory Subtract";
                case 0xD5: return "Keypad Memory Multiply";
                case 0xD6: return "Keypad Memory Divide";
                case 0xD7: return "Keypad + -";
                case 0xD8: return "Keypad Clear";
                case 0xD9: return "Keypad Clear Entry";
                case 0xDA: return "Keypad Binary";
                case 0xDB: return "Keypad Octal";
                case 0xDC: return "Keypad Decimal";
                case 0xDD: return "Keypad Hexadecimal";
                case 0xE0: return "Keyboard LeftControl";
                case 0xE1: return "Keyboard LeftShift";
                case 0xE2: return "Keyboard LeftAlt";
                case 0xE3: return "Keyboard Left GUI";
                case 0xE4: return "Keyboard RightControl";
                case 0xE5: return "Keyboard RightShift";
                case 0xE6: return "Keyboard RightAlt";
                case 0xE7: return "Keyboard Right GUI";
                default: return "Reserved";
            }
        case 0x08:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "Num Lock";
                case 0x02: return "Caps Lock";
                case 0x03: return "Scroll Lock";
                case 0x04: return "Compose";
                case 0x05: return "Kana";
                case 0x06: return "Power";
                case 0x07: return "Shift";
                case 0x08: return "Do Not Disturb";
                case 0x09: return "Mute";
                case 0x0A: return "Tone Enable";
                case 0x0B: return "High Cut Filter";
                case 0x0C: return "Low Cut Filter";
                case 0x0D: return "Equalizer Enable";
                case 0x0E: return "Sound Field On";
                case 0x0F: return "Surround On";
                case 0x10: return "Repeat";
                case 0x11: return "Stereo";
                case 0x12: return "Sampling Rate Detect";
                case 0x13: return "Spinning";
                case 0x14: return "CAV";
                case 0x15: return "CLV";
                case 0x16: return "Recording Format Detect";
                case 0x17: return "Off-Hook";
                case 0x18: return "Ring";
                case 0x19: return "Message Waiting";
                case 0x1A: return "Data Mode";
                case 0x1B: return "Battery Operation";
                case 0x1C: return "Battery OK";
                case 0x1D: return "Battery Low";
                case 0x1E: return "Speaker";
                case 0x1F: return "Headset";
                case 0x20: return "Hold";
                case 0x21: return "Microphone";
                case 0x22: return "Coverage";
                case 0x23: return "Night Mode";
                case 0x24: return "Send Calls";
                case 0x25: return "Call Pickup";
                case 0x26: return "Conference";
                case 0x27: return "Stand-by";
                case 0x28: return "Camera On";
                case 0x29: return "Camera Off";
                case 0x2A: return "On-Line";
                case 0x2B: return "Off-Line";
                case 0x2C: return "Busy";
                case 0x2D: return "Ready";
                case 0x2E: return "Paper-Out";
                case 0x2F: return "Paper-Jam";
                case 0x30: return "Remote";
                case 0x31: return "Forward";
                case 0x32: return "Reverse";
                case 0x33: return "Stop";
                case 0x34: return "Rewind";
                case 0x35: return "Fast Forward";
                case 0x36: return "Play";
                case 0x37: return "Pause";
                case 0x38: return "Record";
                case 0x39: return "Error";
                case 0x3A: return "Usage Selected Indicator";
                case 0x3B: return "Usage In Use Indicator";
                case 0x3C: return "Usage Multi Mode Indicator";
                case 0x3D: return "Indicator On";
                case 0x3E: return "Indicator Flash";
                case 0x3F: return "Indicator Slow Blink";
                case 0x40: return "Indicator Fast Blink";
                case 0x41: return "Indicator Off";
                case 0x42: return "Flash On Time";
                case 0x43: return "Slow Blink On Time";
                case 0x44: return "Slow Blink Off Time";
                case 0x45: return "Fast Blink On Time";
                case 0x46: return "Fast Blink Off Time";
                case 0x47: return "Usage Indicator Color";
                case 0x48: return "Indicator Red";
                case 0x49: return "Indicator Green";
                case 0x4A: return "Indicator Amber";
                case 0x4B: return "Generic Indicator";
                case 0x4C: return "System Suspend";
                case 0x4D: return "External Power Connected";
                case 0x4E: return "Indicator Blue";
                case 0x4F: return "Indicator Orange";
                case 0x50: return "Good Status";
                case 0x51: return "Warning Status";
                case 0x52: return "RGB LED";
                case 0x53: return "Red LED Channel";
                case 0x54: return "Blue LED Channel";
                case 0x55: return "Green LED Channel";
                case 0x56: return "LED Intensity";
                case 0x57: return "System Microphone Mute";
                case 0x60: return "Player Indicator";
                case 0x61: return "Player 1";
                case 0x62: return "Player 2";
                case 0x63: return "Player 3";
                case 0x64: return "Player 4";
                case 0x65: return "Player 5";
                case 0x66: return "Player 6";
                case 0x67: return "Player 7";
                case 0x68: return "Player 8";
                default: return "Reserved";
            }
        case 0x09:
            switch (usageId) {
                case 0x00: return "No Button Pressed";
                case 0x01: return "Button 1 (primary trigger)";
                case 0x02: return "Button 2 (secondary)";
                case 0x03: return "Button 3 (tertiary)";
                case 0x04: return "Button 4 See Note";
                default: return `Button ${usageId}`;
            }
        case 0x0A:
            switch (usageId) {
                case 0x00: return "Reserved";
                case 0x01: return "Instance 1";
                case 0x02: return "Instance 2";
                case 0x03: return "Instance 3";
                case 0x04: return "Instance 4";
                default: return `Instance ${usageId}`;
            }
        case 0x0B:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "Phone";
                case 0x02: return "Answering Machine";
                case 0x03: return "Message Controls";
                case 0x04: return "Handset";
                case 0x05: return "Headset";
                case 0x06: return "Telephony Key Pad";
                case 0x07: return "Programmable Button";
                case 0x20: return "Hook Switch";
                case 0x21: return "Flash";
                case 0x22: return "Feature";
                case 0x23: return "Hold";
                case 0x24: return "Redial";
                case 0x25: return "Transfer";
                case 0x26: return "Drop";
                case 0x27: return "Park";
                case 0x28: return "Forward Calls";
                case 0x29: return "Alternate Function";
                case 0x2A: return "Line";
                case 0x2B: return "Speaker Phone";
                case 0x2C: return "Conference";
                case 0x2D: return "Ring Enable";
                case 0x2E: return "Ring Select";
                case 0x2F: return "Phone Mute";
                case 0x30: return "Caller ID";
                case 0x31: return "Send";
                case 0x50: return "Speed Dial";
                case 0x51: return "Store Number";
                case 0x52: return "Recall Number";
                case 0x53: return "Phone Directory";
                case 0x70: return "Voice Mail";
                case 0x71: return "Screen Calls";
                case 0x72: return "Do Not Disturb";
                case 0x73: return "Message";
                case 0x74: return "Answer On Off";
                case 0x90: return "Inside Dial Tone";
                case 0x91: return "Outside Dial Tone";
                case 0x92: return "Inside Ring Tone";
                case 0x93: return "Outside Ring Tone";
                case 0x94: return "Priority Ring Tone";
                case 0x95: return "Inside Ringback";
                case 0x96: return "Priority Ringback";
                case 0x97: return "Line Busy Tone";
                case 0x98: return "Reorder Tone";
                case 0x99: return "Call Waiting Tone";
                case 0x9A: return "Confirmation Tone 1";
                case 0x9B: return "Confirmation Tone 2";
                case 0x9C: return "Tones Off";
                case 0x9D: return "Outside Ringback";
                case 0x9E: return "Ringer";
                case 0xB0: return "Phone Key 0";
                case 0xB1: return "Phone Key 1";
                case 0xB2: return "Phone Key 2";
                case 0xB3: return "Phone Key 3";
                case 0xB4: return "Phone Key 4";
                case 0xB5: return "Phone Key 5";
                case 0xB6: return "Phone Key 6";
                case 0xB7: return "Phone Key 7";
                case 0xB8: return "Phone Key 8";
                case 0xB9: return "Phone Key 9";
                case 0xBA: return "Phone Key Star";
                case 0xBB: return "Phone Key Pound";
                case 0xBC: return "Phone Key A";
                case 0xBD: return "Phone Key B";
                case 0xBE: return "Phone Key C";
                case 0xBF: return "Phone Key D";
                case 0xC0: return "Phone Call History Key";
                case 0xC1: return "Phone Caller ID Key";
                case 0xC2: return "Phone Settings Key";
                case 0xF0: return "Host Control";
                case 0xF1: return "Host Available";
                case 0xF2: return "Host Call Active";
                case 0xF3: return "Activate Handset Audio";
                case 0xF4: return "Ring Type";
                case 0xF5: return "Re-dialable Phone Number";
                case 0xF8: return "Stop Ring Tone";
                case 0xF9: return "PSTN Ring Tone";
                case 0xFA: return "Host Ring Tone";
                case 0xFB: return "Alert Sound Error";
                case 0xFC: return "Alert Sound Confirm";
                case 0xFD: return "Alert Sound Notification";
                case 0xFE: return "Silent Ring";
                case 0x108: return "Email Message Waiting";
                case 0x109: return "Voicemail Message Waiting";
                case 0x10A: return "Host Hold";
                case 0x110: return "Incoming Call History Count";
                case 0x111: return "Outgoing Call History Count";
                case 0x112: return "Incoming Call History";
                case 0x113: return "Outgoing Call History";
                case 0x114: return "Phone Locale";
                case 0x140: return "Phone Time Second";
                case 0x141: return "Phone Time Minute";
                case 0x142: return "Phone Time Hour";
                case 0x143: return "Phone Date Day";
                case 0x144: return "Phone Date Month";
                case 0x145: return "Phone Date Year";
                case 0x146: return "Handset Nickname";
                case 0x147: return "Address Book ID";
                case 0x14A: return "Call Duration";
                case 0x14B: return "Dual Mode Phone";
                default: return "Reserved";
            }
        case 0x0C:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "Consumer Control";
                case 0x02: return "Numeric Key Pad";
                case 0x03: return "Programmable Buttons";
                case 0x04: return "Microphone";
                case 0x05: return "Headphone";
                case 0x06: return "Graphic Equalizer";
                case 0x20: return "+10";
                case 0x21: return "+100";
                case 0x22: return "AM PM";
                case 0x30: return "Power";
                case 0x31: return "Reset";
                case 0x32: return "Sleep";
                case 0x33: return "Sleep After";
                case 0x34: return "Sleep Mode";
                case 0x35: return "Illumination";
                case 0x36: return "Function Buttons";
                case 0x40: return "Menu";
                case 0x41: return "Menu Pick";
                case 0x42: return "Menu Up";
                case 0x43: return "Menu Down";
                case 0x44: return "Menu Left";
                case 0x45: return "Menu Right";
                case 0x46: return "Menu Escape";
                case 0x47: return "Menu Value Increase";
                case 0x48: return "Menu Value Decrease";
                case 0x60: return "Data On Screen";
                case 0x61: return "Closed Caption";
                case 0x62: return "Closed Caption Select";
                case 0x63: return "VCR TV";
                case 0x64: return "Broadcast Mode";
                case 0x65: return "Snapshot";
                case 0x66: return "Still";
                case 0x67: return "Picture-in-Picture Toggle";
                case 0x68: return "Picture-in-Picture Swap";
                case 0x69: return "Red Menu Button";
                case 0x6A: return "Green Menu Button";
                case 0x6B: return "Blue Menu Button";
                case 0x6C: return "Yellow Menu Button";
                case 0x6D: return "Aspect";
                case 0x6E: return "3D Mode Select";
                case 0x6F: return "Display Brightness Increment";
                case 0x70: return "Display Brightness Decrement";
                case 0x71: return "Display Brightness";
                case 0x72: return "Display Backlight Toggle";
                case 0x73: return "Display Set Brightness to Minimum";
                case 0x74: return "Display Set Brightness to Maximum";
                case 0x75: return "Display Set Auto Brightness";
                case 0x76: return "Camera Access Enabled";
                case 0x77: return "Camera Access Disabled";
                case 0x78: return "Camera Access Toggle";
                case 0x79: return "Keyboard Brightness Increment";
                case 0x7A: return "Keyboard Brightness Decrement";
                case 0x7B: return "Keyboard Backlight Set Level";
                case 0x7C: return "Keyboard Backlight";
                case 0x7D: return "Keyboard Backlight Set Minimum";
                case 0x7E: return "Keyboard Backlight Set Maximum";
                case 0x7F: return "Keyboard Backlight Auto";
                case 0x80: return "Selection";
                case 0x81: return "Assign Selection";
                case 0x82: return "Mode Step";
                case 0x83: return "Recall Last";
                case 0x84: return "Enter Channel";
                case 0x85: return "Order Movie";
                case 0x86: return "Channel";
                case 0x87: return "Media Selection";
                case 0x88: return "Media Select Computer";
                case 0x89: return "Media Select TV";
                case 0x8A: return "Media Select WWW";
                case 0x8B: return "Media Select DVD";
                case 0x8C: return "Media Select Telephone";
                case 0x8D: return "Media Select Program Guide";
                case 0x8E: return "Media Select Video Phone";
                case 0x8F: return "Media Select Games";
                case 0x90: return "Media Select Messages";
                case 0x91: return "Media Select CD";
                case 0x92: return "Media Select VCR";
                case 0x93: return "Media Select Tuner";
                case 0x94: return "Quit";
                case 0x95: return "Help";
                case 0x96: return "Media Select Tape";
                case 0x97: return "Media Select Cable";
                case 0x98: return "Media Select Satellite";
                case 0x99: return "Media Select Security";
                case 0x9A: return "Media Select Home";
                case 0x9B: return "Media Select Call";
                case 0x9C: return "Channel Increment";
                case 0x9D: return "Channel Decrement";
                case 0x9E: return "Media Select SAP";
                case 0xA0: return "VCR Plus";
                case 0xA1: return "Once";
                case 0xA2: return "Daily";
                case 0xA3: return "Weekly";
                case 0xA4: return "Monthly";
                case 0xB0: return "Play";
                case 0xB1: return "Pause";
                case 0xB2: return "Record";
                case 0xB3: return "Fast Forward";
                case 0xB4: return "Rewind";
                case 0xB5: return "Scan Next Track";
                case 0xB6: return "Scan Previous Track";
                case 0xB7: return "Stop";
                case 0xB8: return "Eject";
                case 0xB9: return "Random Play";
                case 0xBA: return "Select Disc";
                case 0xBB: return "Enter Disc";
                case 0xBC: return "Repeat";
                case 0xBD: return "Tracking";
                case 0xBE: return "Track Normal";
                case 0xBF: return "Slow Tracking";
                case 0xC0: return "Frame Forward";
                case 0xC1: return "Frame Back";
                case 0xC2: return "Mark";
                case 0xC3: return "Clear Mark";
                case 0xC4: return "Repeat From Mark";
                case 0xC5: return "Return To Mark";
                case 0xC6: return "Search Mark Forward";
                case 0xC7: return "Search Mark Backwards";
                case 0xC8: return "Counter Reset";
                case 0xC9: return "Show Counter";
                case 0xCA: return "Tracking Increment";
                case 0xCB: return "Tracking Decrement";
                case 0xCC: return "Stop Eject";
                case 0xCD: return "Play Pause";
                case 0xCE: return "Play Skip";
                case 0xCF: return "Voice Command";
                case 0xD0: return "Invoke Capture Interface";
                case 0xD1: return "Start or Stop Game Recording";
                case 0xD2: return "Historical Game Capture";
                case 0xD3: return "Capture Game Screenshot";
                case 0xD4: return "Show or Hide Recording Indicator";
                case 0xD5: return "Start or Stop Microphone Capture";
                case 0xD6: return "Start or Stop Camera Capture";
                case 0xD7: return "Start or Stop Game Broadcast";
                case 0xD8: return "Start or Stop Voice Dictation Session";
                case 0xD9: return "Invoke Dismiss Emoji Picker";
                case 0xE0: return "Volume";
                case 0xE1: return "Balance";
                case 0xE2: return "Mute";
                case 0xE3: return "Bass";
                case 0xE4: return "Treble";
                case 0xE5: return "Bass Boost";
                case 0xE6: return "Surround Mode";
                case 0xE7: return "Loudness";
                case 0xE8: return "MPX";
                case 0xE9: return "Volume Increment";
                case 0xEA: return "Volume Decrement";
                case 0xF0: return "Speed Select";
                case 0xF1: return "Playback Speed";
                case 0xF2: return "Standard Play";
                case 0xF3: return "Long Play";
                case 0xF4: return "Extended Play";
                case 0xF5: return "Slow";
                case 0x100: return "Fan Enable";
                case 0x101: return "Fan Speed";
                case 0x102: return "Light Enable";
                case 0x103: return "Light Illumination Level";
                case 0x104: return "Climate Control Enable";
                case 0x105: return "Room Temperature";
                case 0x106: return "Security Enable";
                case 0x107: return "Fire Alarm";
                case 0x108: return "Police Alarm";
                case 0x109: return "Proximity";
                case 0x10A: return "Motion";
                case 0x10B: return "Duress Alarm";
                case 0x10C: return "Holdup Alarm";
                case 0x10D: return "Medical Alarm";
                case 0x150: return "Balance Right";
                case 0x151: return "Balance Left";
                case 0x152: return "Bass Increment";
                case 0x153: return "Bass Decrement";
                case 0x154: return "Treble Increment";
                case 0x155: return "Treble Decrement";
                case 0x160: return "Speaker System";
                case 0x161: return "Channel Left";
                case 0x162: return "Channel Right";
                case 0x163: return "Channel Center";
                case 0x164: return "Channel Front";
                case 0x165: return "Channel Center Front";
                case 0x166: return "Channel Side";
                case 0x167: return "Channel Surround";
                case 0x168: return "Channel Low Frequency Enhancement";
                case 0x169: return "Channel Top";
                case 0x16A: return "Channel Unknown";
                case 0x170: return "Sub-channel";
                case 0x171: return "Sub-channel Increment";
                case 0x172: return "Sub-channel Decrement";
                case 0x173: return "Alternate Audio Increment";
                case 0x174: return "Alternate Audio Decrement";
                case 0x180: return "Application Launch Buttons";
                case 0x181: return "AL Launch Button Configuration Tool";
                case 0x182: return "AL Programmable Button Configuration";
                case 0x183: return "AL Consumer Control Configuration";
                case 0x184: return "AL Word Processor";
                case 0x185: return "AL Text Editor";
                case 0x186: return "AL Spreadsheet";
                case 0x187: return "AL Graphics Editor";
                case 0x188: return "AL Presentation App";
                case 0x189: return "AL Database App";
                case 0x18A: return "AL Email Reader";
                case 0x18B: return "AL Newsreader";
                case 0x18C: return "AL Voicemail";
                case 0x18D: return "AL Contacts Address Book";
                case 0x18E: return "AL Calendar Schedule";
                case 0x18F: return "AL Task Project Manager";
                case 0x190: return "AL Log Journal Timecard";
                case 0x191: return "AL Checkbook Finance";
                case 0x192: return "AL Calculator";
                case 0x193: return "AL A V Capture Playback";
                case 0x194: return "AL Local Machine Browser";
                case 0x195: return "AL LAN WAN Browser";
                case 0x196: return "AL Internet Browser";
                case 0x197: return "AL Remote Networking ISP Connect";
                case 0x198: return "AL Network Conference";
                case 0x199: return "AL Network Chat";
                case 0x19A: return "AL Telephony Dialer";
                case 0x19B: return "AL Logon";
                case 0x19C: return "AL Logoff";
                case 0x19D: return "AL Logon Logoff";
                case 0x19E: return "AL Terminal Lock Screensaver";
                case 0x19F: return "AL Control Panel";
                case 0x1A0: return "AL Command Line Processor Run";
                case 0x1A1: return "AL Process Task Manager";
                case 0x1A2: return "AL Select Task Application";
                case 0x1A3: return "AL Next Task Application";
                case 0x1A4: return "AL Previous Task Application";
                case 0x1A5: return "AL Preemptive Halt Task Application";
                case 0x1A6: return "AL Integrated Help Center";
                case 0x1A7: return "AL Documents";
                case 0x1A8: return "AL Thesaurus";
                case 0x1A9: return "AL Dictionary";
                case 0x1AA: return "AL Desktop";
                case 0x1AB: return "AL Spell Check";
                case 0x1AC: return "AL Grammar Check";
                case 0x1AD: return "AL Wireless Status";
                case 0x1AE: return "AL Keyboard Layout";
                case 0x1AF: return "AL Virus Protection";
                case 0x1B0: return "AL Encryption";
                case 0x1B1: return "AL Screen Saver";
                case 0x1B2: return "AL Alarms";
                case 0x1B3: return "AL Clock";
                case 0x1B4: return "AL File Browser";
                case 0x1B5: return "AL Power Status";
                case 0x1B6: return "AL Image Browser";
                case 0x1B7: return "AL Audio Browser";
                case 0x1B8: return "AL Movie Browser";
                case 0x1B9: return "AL Digital Rights Manager";
                case 0x1BA: return "AL Digital Wallet";
                case 0x1BC: return "AL Instant Messaging";
                case 0x1BD: return "AL OEM Features Tips Tutorial Browser";
                case 0x1BE: return "AL OEM Help";
                case 0x1BF: return "AL Online Community";
                case 0x1C0: return "AL Entertainment Content Browser";
                case 0x1C1: return "AL Online Shopping Browser";
                case 0x1C2: return "AL SmartCard Information Help";
                case 0x1C3: return "AL Market Monitor Finance Browser";
                case 0x1C4: return "AL Customized Corporate News Browser";
                case 0x1C5: return "AL Online Activity Browser";
                case 0x1C6: return "AL Research Search Browser";
                case 0x1C7: return "AL Audio Player";
                case 0x1C8: return "AL Message Status";
                case 0x1C9: return "AL Contact Sync";
                case 0x1CA: return "AL Navigation";
                case 0x1CB: return "AL Context-aware Desktop Assistant";
                case 0x200: return "Generic GUI Application Controls";
                case 0x201: return "AC New";
                case 0x202: return "AC Open";
                case 0x203: return "AC Close";
                case 0x204: return "AC Exit";
                case 0x205: return "AC Maximize";
                case 0x206: return "AC Minimize";
                case 0x207: return "AC Save";
                case 0x208: return "AC Print";
                case 0x209: return "AC Properties";
                case 0x21A: return "AC Undo";
                case 0x21B: return "AC Copy";
                case 0x21C: return "AC Cut";
                case 0x21D: return "AC Paste";
                case 0x21E: return "AC Select All";
                case 0x21F: return "AC Find";
                case 0x220: return "AC Find and Replace";
                case 0x221: return "AC Search";
                case 0x222: return "AC Go To";
                case 0x223: return "AC Home";
                case 0x224: return "AC Back";
                case 0x225: return "AC Forward";
                case 0x226: return "AC Stop";
                case 0x227: return "AC Refresh";
                case 0x228: return "AC Previous Link";
                case 0x229: return "AC Next Link";
                case 0x22A: return "AC Bookmarks";
                case 0x22B: return "AC History";
                case 0x22C: return "AC Subscriptions";
                case 0x22D: return "AC Zoom In";
                case 0x22E: return "AC Zoom Out";
                case 0x22F: return "AC Zoom";
                case 0x230: return "AC Full Screen View";
                case 0x231: return "AC Normal View";
                case 0x232: return "AC View Toggle";
                case 0x233: return "AC Scroll Up";
                case 0x234: return "AC Scroll Down";
                case 0x235: return "AC Scroll";
                case 0x236: return "AC Pan Left";
                case 0x237: return "AC Pan Right";
                case 0x238: return "AC Pan";
                case 0x239: return "AC New Window";
                case 0x23A: return "AC Tile Horizontally";
                case 0x23B: return "AC Tile Vertically";
                case 0x23C: return "AC Format";
                case 0x23D: return "AC Edit";
                case 0x23E: return "AC Bold";
                case 0x23F: return "AC Italics";
                case 0x240: return "AC Underline";
                case 0x241: return "AC Strikethrough";
                case 0x242: return "AC Subscript";
                case 0x243: return "AC Superscript";
                case 0x244: return "AC All Caps";
                case 0x245: return "AC Rotate";
                case 0x246: return "AC Resize";
                case 0x247: return "AC Flip Horizontal";
                case 0x248: return "AC Flip Vertical";
                case 0x249: return "AC Mirror Horizontal";
                case 0x24A: return "AC Mirror Vertical";
                case 0x24B: return "AC Font Select";
                case 0x24C: return "AC Font Color";
                case 0x24D: return "AC Font Size";
                case 0x24E: return "AC Justify Left";
                case 0x24F: return "AC Justify Center H";
                case 0x250: return "AC Justify Right";
                case 0x251: return "AC Justify Block H";
                case 0x252: return "AC Justify Top";
                case 0x253: return "AC Justify Center V";
                case 0x254: return "AC Justify Bottom";
                case 0x255: return "AC Justify Block V";
                case 0x256: return "AC Indent Decrease";
                case 0x257: return "AC Indent Increase";
                case 0x258: return "AC Numbered List";
                case 0x259: return "AC Restart Numbering";
                case 0x25A: return "AC Bulleted List";
                case 0x25B: return "AC Promote";
                case 0x25C: return "AC Demote";
                case 0x25D: return "AC Yes";
                case 0x25E: return "AC No";
                case 0x25F: return "AC Cancel";
                case 0x260: return "AC Catalog";
                case 0x261: return "AC Buy Checkout";
                case 0x262: return "AC Add to Cart";
                case 0x263: return "AC Expand";
                case 0x264: return "AC Expand All";
                case 0x265: return "AC Collapse";
                case 0x266: return "AC Collapse All";
                case 0x267: return "AC Print Preview";
                case 0x268: return "AC Paste Special";
                case 0x269: return "AC Insert Mode";
                case 0x26A: return "AC Delete";
                case 0x26B: return "AC Lock";
                case 0x26C: return "AC Unlock";
                case 0x26D: return "AC Protect";
                case 0x26E: return "AC Unprotect";
                case 0x26F: return "AC Attach Comment";
                case 0x270: return "AC Delete Comment";
                case 0x271: return "AC View Comment";
                case 0x272: return "AC Select Word";
                case 0x273: return "AC Select Sentence";
                case 0x274: return "AC Select Paragraph";
                case 0x275: return "AC Select Column";
                case 0x276: return "AC Select Row";
                case 0x277: return "AC Select Table";
                case 0x278: return "AC Select Object";
                case 0x279: return "AC Redo Repeat";
                case 0x27A: return "AC Sort";
                case 0x27B: return "AC Sort Ascending";
                case 0x27C: return "AC Sort Descending";
                case 0x27D: return "AC Filter";
                case 0x27E: return "AC Set Clock";
                case 0x27F: return "AC View Clock";
                case 0x280: return "AC Select Time Zone";
                case 0x281: return "AC Edit Time Zones";
                case 0x282: return "AC Set Alarm";
                case 0x283: return "AC Clear Alarm";
                case 0x284: return "AC Snooze Alarm";
                case 0x285: return "AC Reset Alarm";
                case 0x286: return "AC Synchronize";
                case 0x287: return "AC Send Receive";
                case 0x288: return "AC Send To";
                case 0x289: return "AC Reply";
                case 0x28A: return "AC Reply All";
                case 0x28B: return "AC Forward Msg";
                case 0x28C: return "AC Send";
                case 0x28D: return "AC Attach File";
                case 0x28E: return "AC Upload";
                case 0x28F: return "AC Download (Save Target As)";
                case 0x290: return "AC Set Borders";
                case 0x291: return "AC Insert Row";
                case 0x292: return "AC Insert Column";
                case 0x293: return "AC Insert File";
                case 0x294: return "AC Insert Picture";
                case 0x295: return "AC Insert Object";
                case 0x296: return "AC Insert Symbol";
                case 0x297: return "AC Save and Close";
                case 0x298: return "AC Rename";
                case 0x299: return "AC Merge";
                case 0x29A: return "AC Split";
                case 0x29B: return "AC Disribute Horizontally";
                case 0x29C: return "AC Distribute Vertically";
                case 0x29D: return "AC Next Keyboard Layout Select";
                case 0x29E: return "AC Navigation Guidance";
                case 0x29F: return "AC Desktop Show All Windows";
                case 0x2A0: return "AC Soft Key Left";
                case 0x2A1: return "AC Soft Key Right";
                case 0x2A2: return "AC Desktop Show All Applications";
                case 0x2B0: return "AC Idle Keep Alive";
                case 0x2C0: return "Extended Keyboard Attributes Collection";
                case 0x2C1: return "Keyboard Form Factor";
                case 0x2C2: return "Keyboard Key Type";
                case 0x2C3: return "Keyboard Physical Layout";
                case 0x2C4: return "Vendor-Specific Keyboard Physical Layout";
                case 0x2C5: return "Keyboard IETF Language Tag Index";
                case 0x2C6: return "Implemented Keyboard Input Assist Controls";
                case 0x2C7: return "Keyboard Input Assist Previous";
                case 0x2C8: return "Keyboard Input Assist Next";
                case 0x2C9: return "Keyboard Input Assist Previous Group";
                case 0x2CA: return "Keyboard Input Assist Next Group";
                case 0x2CB: return "Keyboard Input Assist Accept";
                case 0x2CC: return "Keyboard Input Assist Cancel";
                case 0x2D0: return "Privacy Screen Toggle";
                case 0x2D1: return "Privacy Screen Level Decrement";
                case 0x2D2: return "Privacy Screen Level Increment";
                case 0x2D3: return "Privacy Screen Level Minimum";
                case 0x2D4: return "Privacy Screen Level Maximum";
                case 0x500: return "Contact Edited";
                case 0x501: return "Contact Added";
                case 0x502: return "Contact Record Active";
                case 0x503: return "Contact Index";
                case 0x504: return "Contact Nickname";
                case 0x505: return "Contact First Name";
                case 0x506: return "Contact Last Name";
                case 0x507: return "Contact Full Name";
                case 0x508: return "Contact Phone Number Personal";
                case 0x509: return "Contact Phone Number Business";
                case 0x50A: return "Contact Phone Number Mobile";
                case 0x50B: return "Contact Phone Number Pager";
                case 0x50C: return "Contact Phone Number Fax";
                case 0x50D: return "Contact Phone Number Other";
                case 0x50E: return "Contact Email Personal";
                case 0x50F: return "Contact Email Business";
                case 0x510: return "Contact Email Other";
                case 0x511: return "Contact Email Main";
                case 0x512: return "Contact Speed Dial Number";
                case 0x513: return "Contact Status Flag";
                case 0x514: return "Contact Misc.";
                default: return "Reserved";
            }
        case 0x0D:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "Digitizer";
                case 0x02: return "Pen";
                case 0x03: return "Light Pen";
                case 0x04: return "Touch Screen";
                case 0x05: return "Touch Pad";
                case 0x06: return "Whiteboard";
                case 0x07: return "Coordinate Measuring Machine";
                case 0x08: return "3D Digitizer";
                case 0x09: return "Stereo Plotter";
                case 0x0A: return "Articulated Arm";
                case 0x0B: return "Armature";
                case 0x0C: return "Multiple Point Digitizer";
                case 0x0D: return "Free Space Wand";
                case 0x0E: return "Device Configuration";
                case 0x0F: return "Capacitive Heat Map Digitizer";
                case 0x20: return "Stylus";
                case 0x21: return "Puck";
                case 0x22: return "Finger";
                case 0x23: return "Device settings";
                case 0x24: return "Character Gesture";
                case 0x30: return "Tip Pressure";
                case 0x31: return "Barrel Pressure";
                case 0x32: return "In Range";
                case 0x33: return "Touch";
                case 0x34: return "Untouch";
                case 0x35: return "Tap";
                case 0x36: return "Quality";
                case 0x37: return "Data Valid";
                case 0x38: return "Transducer Index";
                case 0x39: return "Tablet Function Keys";
                case 0x3A: return "Program Change Keys";
                case 0x3B: return "Battery Strength";
                case 0x3C: return "Invert";
                case 0x3D: return "X Tilt";
                case 0x3E: return "Y Tilt";
                case 0x3F: return "Azimuth";
                case 0x40: return "Altitude";
                case 0x41: return "Twist";
                case 0x42: return "Tip Switch";
                case 0x43: return "Secondary Tip Switch";
                case 0x44: return "Barrel Switch";
                case 0x45: return "Eraser";
                case 0x46: return "Tablet Pick";
                case 0x47: return "Touch Valid";
                case 0x48: return "Width";
                case 0x49: return "Height";
                case 0x51: return "Contact Identifier";
                case 0x52: return "Device Mode";
                case 0x53: return "Device Identifier";
                case 0x54: return "Contact Count";
                case 0x55: return "Contact Count Maximum";
                case 0x56: return "Scan Time";
                case 0x57: return "Surface Switch";
                case 0x58: return "Button Switch";
                case 0x59: return "Pad Type";
                case 0x5A: return "Secondary Barrel Switch";
                case 0x5B: return "Transducer Serial Number";
                case 0x5C: return "Preferred Color";
                case 0x5D: return "Preferred Color is Locked";
                case 0x5E: return "Preferred Line Width";
                case 0x5F: return "Preferred Line Width is Locked";
                case 0x60: return "Latency Mode";
                case 0x61: return "Gesture Character Quality";
                case 0x62: return "Character Gesture Data Length";
                case 0x63: return "Character Gesture Data";
                case 0x64: return "Gesture Character Encoding";
                case 0x65: return "UTF8 Character Gesture Encoding";
                case 0x66: return "UTF16 Little Endian Character Gesture Encoding";
                case 0x67: return "UTF16 Big Endian Character Gesture Encoding";
                case 0x68: return "UTF32 Little Endian Character Gesture Encoding";
                case 0x69: return "UTF32 Big Endian Character Gesture Encoding";
                case 0x6A: return "Capacitive Heat Map Protocol Vendor ID";
                case 0x6B: return "Capacitive Heat Map Protocol Version";
                case 0x6C: return "Capacitive Heat Map Frame Data";
                case 0x6D: return "Gesture Character Enable";
                case 0x6E: return "Transducer Serial Number Part 2";
                case 0x6F: return "No Preferred Color";
                case 0x70: return "Preferred Line Style";
                case 0x71: return "Preferred Line Style is Locked";
                case 0x72: return "Ink";
                case 0x73: return "Pencil";
                case 0x74: return "Highlighter";
                case 0x75: return "Chisel Marker";
                case 0x76: return "Brush";
                case 0x77: return "No Preference";
                case 0x80: return "Digitizer Diagnostic";
                case 0x81: return "Digitizer Error";
                case 0x82: return "Err Normal Status";
                case 0x83: return "Err Transducers Exceeded";
                case 0x84: return "Err Full Trans Features Unavailable";
                case 0x85: return "Err Charge Low";
                case 0x90: return "Transducer Software Info";
                case 0x91: return "Transducer Vendor Id";
                case 0x92: return "Transducer Product Id";
                case 0x93: return "Device Supported Protocols";
                case 0x94: return "Transducer Supported Protocols";
                case 0x95: return "No Protocol";
                case 0x96: return "Wacom AES Protocol";
                case 0x97: return "USI Protocol";
                case 0x98: return "Microsoft Pen Protocol";
                case 0xA0: return "Supported Report Rates";
                case 0xA1: return "Report Rate";
                case 0xA2: return "Transducer Connected";
                case 0xA3: return "Switch Disabled";
                case 0xA4: return "Switch Unimplemented";
                case 0xA5: return "Transducer Switches";
                case 0xA6: return "Transducer Index Selector";
                case 0xB0: return "Button Press Threshold";
                default: return "Reserved";
            }
        case 0x0E:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "Simple Haptic Controller";
                case 0x10: return "Waveform List";
                case 0x11: return "Duration List";
                case 0x20: return "Auto Trigger";
                case 0x21: return "Manual Trigger";
                case 0x22: return "Auto Trigger Associated Control";
                case 0x23: return "Intensity";
                case 0x24: return "Repeat Count";
                case 0x25: return "Retrigger Period";
                case 0x26: return "Waveform Vendor Page";
                case 0x27: return "Waveform Vendor ID";
                case 0x28: return "Waveform Cutoff Time";
                case 0x1001: return "Waveform None";
                case 0x1002: return "Waveform Stop";
                case 0x1003: return "Waveform Click";
                case 0x1004: return "Waveform Buzz Continuous";
                case 0x1005: return "Waveform Rumble Continuous";
                case 0x1006: return "Waveform Press";
                case 0x1007: return "Waveform Release";
                case 0x1008: return "Waveform Hover";
                case 0x1009: return "Waveform Success";
                case 0x100A: return "Waveform Error";
                case 0x100B: return "Waveform Ink Continuous";
                case 0x100C: return "Waveform Pencil Continuous";
                case 0x100D: return "Waveform Marker Continuous";
                case 0x100E: return "Waveform Chisel Marker Continuous";
                case 0x100F: return "Waveform Brush Continuous";
                case 0x1010: return "Waveform Eraser Continuous";
                case 0x1011: return "Waveform Sparkle Continuous";
                default: return "Reserved";
            }
        case 0x0F:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "Physical Input Device";
                case 0x20: return "Normal";
                case 0x21: return "Set Effect Report";
                case 0x22: return "Effect Parameter Block Index";
                case 0x23: return "Parameter Block Offset";
                case 0x24: return "ROM Flag";
                case 0x25: return "Effect Type";
                case 0x26: return "ET Constant-Force";
                case 0x27: return "ET Ramp";
                case 0x28: return "ET Custom-Force";
                case 0x30: return "ET Square";
                case 0x31: return "ET Sine";
                case 0x32: return "ET Triangle";
                case 0x33: return "ET Sawtooth Up";
                case 0x34: return "ET Sawtooth Down";
                case 0x40: return "ET Spring";
                case 0x41: return "ET Damper";
                case 0x42: return "ET Inertia";
                case 0x43: return "ET Friction";
                case 0x50: return "Duration";
                case 0x51: return "Sample Period";
                case 0x52: return "Gain";
                case 0x53: return "Trigger Button";
                case 0x54: return "Trigger Repeat Interval";
                case 0x55: return "Axes Enable";
                case 0x56: return "Direction Enable";
                case 0x57: return "Direction";
                case 0x58: return "Type Specific Block Offset";
                case 0x59: return "Block Type";
                case 0x5A: return "Set Envelope Report";
                case 0x5B: return "Attack Level";
                case 0x5C: return "Attack Time";
                case 0x5D: return "Fade Level";
                case 0x5E: return "Fade Time";
                case 0x5F: return "Set Condition Report";
                case 0x60: return "Center-Point Offset";
                case 0x61: return "Positive Coefficient";
                case 0x62: return "Negative Coefficient";
                case 0x63: return "Positive Saturation";
                case 0x64: return "Negative Saturation";
                case 0x65: return "Dead Band";
                case 0x66: return "Download Force Sample";
                case 0x67: return "Isoch Custom-Force Enable";
                case 0x68: return "Custom-Force Data Report";
                case 0x69: return "Custom-Force Data";
                case 0x6A: return "Custom-Force Vendor Defined Data";
                case 0x6B: return "Set Custom-Force Report";
                case 0x6C: return "Custom-Force Data Offset";
                case 0x6D: return "Sample Count";
                case 0x6E: return "Set Periodic Report";
                case 0x6F: return "Offset";
                case 0x70: return "Magnitude";
                case 0x71: return "Phase";
                case 0x72: return "Period";
                case 0x73: return "Set Constant-Force Report";
                case 0x74: return "Set Ramp-Force Report";
                case 0x75: return "Ramp Start";
                case 0x76: return "Ramp End";
                case 0x77: return "Effect Operation Report";
                case 0x78: return "Effect Operation";
                case 0x79: return "Op Effect Start";
                case 0x7A: return "Op Effect Start Solo";
                case 0x7B: return "Op Effect Stop";
                case 0x7C: return "Loop Count";
                case 0x7D: return "Device Gain Report";
                case 0x7E: return "Device Gain";
                case 0x7F: return "Parameter Block Pools Report";
                case 0x80: return "RAM Pool Size";
                case 0x81: return "ROM Pool Size";
                case 0x82: return "ROM Effect Block Count";
                case 0x83: return "Simultaneous Effects Max";
                case 0x84: return "Pool Alignment";
                case 0x85: return "Parameter Block Move Report";
                case 0x86: return "Move Source";
                case 0x87: return "Move Destination";
                case 0x88: return "Move Length";
                case 0x89: return "Effect Parameter Block Load Report";
                case 0x8B: return "Effect Parameter Block Load Status";
                case 0x8C: return "Block Load Success";
                case 0x8D: return "Block Load Full";
                case 0x8E: return "Block Load Error";
                case 0x8F: return "Block Handle";
                case 0x90: return "Effect Parameter Block Free Report";
                case 0x91: return "Type Specific Block Handle";
                case 0x92: return "PID State Report";
                case 0x94: return "Effect Playing";
                case 0x95: return "PID Device Control Report";
                case 0x96: return "PID Device Control";
                case 0x97: return "DC Enable Actuators";
                case 0x98: return "DC Disable Actuators";
                case 0x99: return "DC Stop All Effects";
                case 0x9A: return "DC Reset";
                case 0x9B: return "DC Pause";
                case 0x9C: return "DC Continue";
                case 0x9F: return "Device Paused";
                case 0xA0: return "Actuators Enabled";
                case 0xA4: return "Safety Switch";
                case 0xA5: return "Actuator Override Switch";
                case 0xA6: return "Actuator Power";
                case 0xA7: return "Start Delay";
                case 0xA8: return "Parameter Block Size";
                case 0xA9: return "Device-Managed Pool";
                case 0xAA: return "Shared Parameter Blocks";
                case 0xAB: return "Create New Effect Parameter Block Report";
                case 0xAC: return "RAM Pool Available";
                default: return "Reserved";
            }
        // case 0x10: break;
        case 0x11:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "SocControl";
                case 0x02: return "FirmwareTransfer";
                case 0x03: return "FirmwareFileId";
                case 0x04: return "FileOffsetInBytes";
                case 0x05: return "FileTransferSizeMaxInBytes";
                case 0x06: return "FilePayload";
                case 0x07: return "FilePayloadSizeInBytes";
                case 0x08: return "FilePayloadContainsLastBytes";
                case 0x09: return "FileTransferStop";
                case 0x0A: return "FileTransferTillEnd";
                default: return "Reserved";
            }
        case 0x12:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "Eye Tracker";
                case 0x02: return "Head Tracker";
                case 0x10: return "Tracking Data";
                case 0x11: return "Capabilities";
                case 0x12: return "Configuration";
                case 0x13: return "Status";
                case 0x14: return "Control";
                case 0x20: return "Sensor Timestamp";
                case 0x21: return "Position X";
                case 0x22: return "Position Y";
                case 0x23: return "Position Z";
                case 0x24: return "Gaze Point";
                case 0x25: return "Left Eye Position";
                case 0x26: return "Right Eye Position";
                case 0x27: return "Head Position";
                case 0x28: return "Head Direction Point";
                case 0x29: return "Rotation about X axis";
                case 0x2A: return "Rotation about Y axis";
                case 0x2B: return "Rotation about Z axis";
                case 0x100: return "Tracker Quality";
                case 0x101: return "Minimum Tracking Distance";
                case 0x102: return "Optimum Tracking Distance";
                case 0x103: return "Maximum Tracking Distance";
                case 0x104: return "Maximum Screen Plane Width";
                case 0x105: return "Maximum Screen Plane Height";
                case 0x200: return "Display Manufacturer ID";
                case 0x201: return "Display Product ID";
                case 0x202: return "Display Serial Number";
                case 0x203: return "Display Manufacturer Date";
                case 0x204: return "Calibrated Screen Width";
                case 0x205: return "Calibrated Screen Height";
                case 0x300: return "Sampling Frequency";
                case 0x301: return "Configuration Status";
                case 0x400: return "Device Mode Request";
                default: return "Reserved";
            }
        case 0x14:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "Alphanumeric Display";
                case 0x02: return "Auxiliary Display";
                case 0x20: return "Display Attributes Report";
                case 0x21: return "ASCII Character Set";
                case 0x22: return "Data Read Back";
                case 0x23: return "Font Read Back";
                case 0x24: return "Display Control Report";
                case 0x25: return "Clear Display";
                case 0x26: return "Display Enable";
                case 0x27: return "Screen Saver Delay";
                case 0x28: return "Screen Saver Enable";
                case 0x29: return "Vertical Scroll";
                case 0x2A: return "Horizontal Scroll";
                case 0x2B: return "Character Report";
                case 0x2C: return "Display Data";
                case 0x2D: return "Display Status";
                case 0x2E: return "Stat Not Ready";
                case 0x2F: return "Stat Ready";
                case 0x30: return "Err Not a loadable character";
                case 0x31: return "Err Font data cannot be read";
                case 0x32: return "Cursor Position Report";
                case 0x33: return "Row";
                case 0x34: return "Column";
                case 0x35: return "Rows";
                case 0x36: return "Columns";
                case 0x37: return "Cursor Pixel Positioning";
                case 0x38: return "Cursor Mode";
                case 0x39: return "Cursor Enable";
                case 0x3A: return "Cursor Blink";
                case 0x3B: return "Font Report";
                case 0x3C: return "Font Data Buffered Bytes 22.1.7";
                case 0x3D: return "Character Width";
                case 0x3E: return "Character Height";
                case 0x3F: return "Character Spacing Horizontal";
                case 0x40: return "Character Spacing Vertical";
                case 0x41: return "Unicode Character Set";
                case 0x42: return "Font 7-Segment";
                case 0x43: return "7-Segment Direct Map";
                case 0x44: return "Font 14-Segment";
                case 0x45: return "14-Segment Direct Map";
                case 0x46: return "Display Brightness";
                case 0x47: return "Display Contrast";
                case 0x48: return "Character Attribute";
                case 0x49: return "Attribute Readback";
                case 0x4A: return "Attribute Data";
                case 0x4B: return "Char Attr Enhance";
                case 0x4C: return "Char Attr Underline";
                case 0x4D: return "Char Attr Blink";
                case 0x80: return "Bitmap Size X";
                case 0x81: return "Bitmap Size Y";
                case 0x82: return "Max Blit Size";
                case 0x83: return "Bit Depth Format";
                case 0x84: return "Display Orientation";
                case 0x85: return "Palette Report";
                case 0x86: return "Palette Data Size";
                case 0x87: return "Palette Data Offset";
                case 0x88: return "Palette Data";
                case 0x8A: return "Blit Report";
                case 0x8B: return "Blit Rectangle X1";
                case 0x8C: return "Blit Rectangle Y1";
                case 0x8D: return "Blit Rectangle X2";
                case 0x8E: return "Blit Rectangle Y2";
                case 0x8F: return "Blit Data";
                case 0x90: return "Soft Button";
                case 0x91: return "Soft Button ID";
                case 0x92: return "Soft Button Side";
                case 0x93: return "Soft Button Offset 1";
                case 0x94: return "Soft Button Offset 2";
                case 0x95: return "Soft Button Report";
                case 0xC2: return "Soft Keys";
                case 0xCC: return "Display Data Extensions";
                case 0xCF: return "Character Mapping";
                case 0xDD: return "Unicode Equivalent";
                case 0xDF: return "Character Page Mapping";
                case 0xFF: return "Request Report";
                default: return "Reserved";
            }
        case 0x20:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "Sensor";
                case 0x10: return "Biometric";
                case 0x11: return "Biometric: Human Presence";
                case 0x12: return "Biometric: Human Proximity";
                case 0x13: return "Biometric: Human Touch";
                case 0x14: return "Biometric: Blood Pressure";
                case 0x15: return "Biometric: Body Temperature";
                case 0x16: return "Biometric: Heart Rate";
                case 0x17: return "Biometric: Heart Rate Variability";
                case 0x18: return "Biometric: Peripheral Oxygen Saturation";
                case 0x19: return "Biometric: Respiratory Rate";
                case 0x20: return "Electrical";
                case 0x21: return "Electrical: Capacitance";
                case 0x22: return "Electrical: Current";
                case 0x23: return "Electrical: Power";
                case 0x24: return "Electrical: Inductance";
                case 0x25: return "Electrical: Resistance";
                case 0x26: return "Electrical: Voltage";
                case 0x27: return "Electrical: Potentiometer";
                case 0x28: return "Electrical: Frequency";
                case 0x29: return "Electrical: Period";
                case 0x30: return "Environmental";
                case 0x31: return "Environmental: Atmospheric Pressure";
                case 0x32: return "Environmental: Humidity";
                case 0x33: return "Environmental: Temperature";
                case 0x34: return "Environmental: Wind Direction";
                case 0x35: return "Environmental: Wind Speed";
                case 0x36: return "Environmental: Air Quality";
                case 0x37: return "Environmental: Heat Index";
                case 0x38: return "Environmental: Surface Temperature";
                case 0x39: return "Environmental: Volatile Organic Compounds";
                case 0x3A: return "Environmental: Object Presence";
                case 0x3B: return "Environmental: Object Proximity";
                case 0x40: return "Light";
                case 0x41: return "Light: Ambient Light";
                case 0x42: return "Light: Consumer Infrared";
                case 0x43: return "Light: Infrared Light";
                case 0x44: return "Light: Visible Light";
                case 0x45: return "Light: Ultraviolet Light";
                case 0x50: return "Location";
                case 0x51: return "Location: Broadcast";
                case 0x52: return "Location: Dead Reckoning";
                case 0x53: return "Location: GPS (Global Positioning System)";
                case 0x54: return "Location: Lookup";
                case 0x55: return "Location: Other";
                case 0x56: return "Location: Static";
                case 0x57: return "Location: Triangulation";
                case 0x60: return "Mechanical";
                case 0x61: return "Mechanical: Boolean Switch";
                case 0x62: return "Mechanical: Boolean Switch Array";
                case 0x63: return "Mechanical: Multivalue Switch";
                case 0x64: return "Mechanical: Force";
                case 0x65: return "Mechanical: Pressure";
                case 0x66: return "Mechanical: Strain";
                case 0x67: return "Mechanical: Weight";
                case 0x68: return "Mechanical: Haptic Vibrator";
                case 0x69: return "Mechanical: Hall Effect Switch";
                case 0x70: return "Motion";
                case 0x71: return "Motion: Accelerometer 1D";
                case 0x72: return "Motion: Accelerometer 2D";
                case 0x73: return "Motion: Accelerometer 3D";
                case 0x74: return "Motion: Gyrometer 1D";
                case 0x75: return "Motion: Gyrometer 2D";
                case 0x76: return "Motion: Gyrometer 3D";
                case 0x77: return "Motion: Motion Detector";
                case 0x78: return "Motion: Speedometer";
                case 0x79: return "Motion: Accelerometer";
                case 0x7A: return "Motion: Gyrometer";
                case 0x7B: return "Motion: Gravity Vector";
                case 0x7C: return "Motion: Linear Accelerometer";
                case 0x80: return "Orientation";
                case 0x81: return "Orientation: Compass 1D";
                case 0x82: return "Orientation: Compass 2D";
                case 0x83: return "Orientation: Compass 3D";
                case 0x84: return "Orientation: Inclinometer 1D";
                case 0x85: return "Orientation: Inclinometer 2D";
                case 0x86: return "Orientation: Inclinometer 3D";
                case 0x87: return "Orientation: Distance 1D";
                case 0x88: return "Orientation: Distance 2D";
                case 0x89: return "Orientation: Distance 3D";
                case 0x8A: return "Orientation: Device Orientation";
                case 0x8B: return "Orientation: Compass";
                case 0x8C: return "Orientation: Inclinometer";
                case 0x8D: return "Orientation: Distance";
                case 0x8E: return "Orientation: Relative Orientation";
                case 0x8F: return "Orientation: Simple Orientation";
                case 0x90: return "Scanner";
                case 0x91: return "Scanner: Barcode";
                case 0x92: return "Scanner: RFID";
                case 0x93: return "Scanner: NFC";
                case 0xA0: return "Time";
                case 0xA1: return "Time: Alarm Timer";
                case 0xA2: return "Time: Real Time Clock";
                case 0xB0: return "Personal Activity";
                case 0xB1: return "Personal Activity: Activity Detection";
                case 0xB2: return "Personal Activity: Device Position";
                case 0xB3: return "Personal Activity: Floor Tracker";
                case 0xB4: return "Personal Activity: Pedometer";
                case 0xB5: return "Personal Activity: Step Detection";
                case 0xC0: return "Orientation Extended";
                case 0xC1: return "Orientation Extended: Geomagnetic Orientation";
                case 0xC2: return "Orientation Extended: Magnetometer";
                case 0xD0: return "Gesture";
                case 0xD1: return "Gesture: Chassis Flip Gesture";
                case 0xD2: return "Gesture: Hinge Fold Gesture";
                case 0xE0: return "Other";
                case 0xE1: return "Other: Custom";
                case 0xE2: return "Other: Generic";
                case 0xE3: return "Other: Generic Enumerator";
                case 0xE4: return "Other: Hinge Angle";
                case 0x200: return "Event";
                case 0x201: return "Event: Sensor State";
                case 0x202: return "Event: Sensor Event";
                case 0x300: return "Property";
                case 0x301: return "Property: Friendly Name";
                case 0x302: return "Property: Persistent Unique ID";
                case 0x303: return "Property: Sensor Status";
                case 0x304: return "Property: Minimum Report Interval";
                case 0x305: return "Property: Sensor Manufacturer";
                case 0x306: return "Property: Sensor Model";
                case 0x307: return "Property: Sensor Serial Number";
                case 0x308: return "Property: Sensor Description";
                case 0x309: return "Property: Sensor Connection Type";
                case 0x30A: return "Property: Sensor Device Path";
                case 0x30B: return "Property: Hardware Revision";
                case 0x30C: return "Property: Firmware Version";
                case 0x30D: return "Property: Release Date";
                case 0x30E: return "Property: Report Interval";
                case 0x30F: return "Property: Change Sensitivity Absolute";
                case 0x310: return "Property: Change Sensitivity Percent of Range";
                case 0x311: return "Property: Change Sensitivity Percent Relative";
                case 0x312: return "Property: Accuracy";
                case 0x313: return "Property: Resolution";
                case 0x314: return "Property: Maximum";
                case 0x315: return "Property: Minimum";
                case 0x316: return "Property: Reporting State";
                case 0x317: return "Property: Sampling Rate";
                case 0x318: return "Property: Response Curve";
                case 0x319: return "Property: Power State";
                case 0x31A: return "Property: Maximum FIFO Events";
                case 0x31B: return "Property: Report Latency";
                case 0x31C: return "Property: Flush FIFO Events";
                case 0x31D: return "Property: Maximum Power Consumption";
                case 0x31E: return "Property: Is Primary";
                case 0x31F: return "Property: Human Presence Detection Type";
                case 0x400: return "Data Field: Location";
                case 0x402: return "Data Field: Altitude Antenna Sea Level";
                case 0x403: return "Data Field: Differential Reference Station ID";
                case 0x404: return "Data Field: Altitude Ellipsoid Error";
                case 0x405: return "Data Field: Altitude Ellipsoid";
                case 0x406: return "Data Field: Altitude Sea Level Error";
                case 0x407: return "Data Field: Altitude Sea Level";
                case 0x408: return "Data Field: Differential GPS Data Age";
                case 0x409: return "Data Field: Error Radius";
                case 0x40A: return "Data Field: Fix Quality";
                case 0x40B: return "Data Field: Fix Type";
                case 0x40C: return "Data Field: Geoidal Separation";
                case 0x40D: return "Data Field: GPS Operation Mode";
                case 0x40E: return "Data Field: GPS Selection Mode";
                case 0x40F: return "Data Field: GPS Status";
                case 0x410: return "Data Field: Position Dilution of Precision";
                case 0x411: return "Data Field: Horizontal Dilution of Precision";
                case 0x412: return "Data Field: Vertical Dilution of Precision";
                case 0x413: return "Data Field: Latitude";
                case 0x414: return "Data Field: Longitude";
                case 0x415: return "Data Field: True Heading";
                case 0x416: return "Data Field: Magnetic Heading";
                case 0x417: return "Data Field: Magnetic Variation";
                case 0x418: return "Data Field: Speed";
                case 0x419: return "Data Field: Satellites in View";
                case 0x41A: return "Data Field: Satellites in View Azimuth";
                case 0x41B: return "Data Field: Satellites in View Elevation";
                case 0x41C: return "Data Field: Satellites in View IDs";
                case 0x41D: return "Data Field: Satellites in View PRNs";
                case 0x41E: return "Data Field: Satellites in View S N Ratios";
                case 0x41F: return "Data Field: Satellites Used Count";
                case 0x420: return "Data Field: Satellites Used PRNs";
                case 0x421: return "Data Field: NMEA Sentence";
                case 0x422: return "Data Field: Address Line 1";
                case 0x423: return "Data Field: Address Line 2";
                case 0x424: return "Data Field: City";
                case 0x425: return "Data Field: State or Province";
                case 0x426: return "Data Field: Country or Region";
                case 0x427: return "Data Field: Postal Code";
                case 0x42A: return "Property: Location";
                case 0x42B: return "Property: Location Desired Accuracy";
                case 0x430: return "Data Field: Environmental";
                case 0x431: return "Data Field: Atmospheric Pressure";
                case 0x433: return "Data Field: Relative Humidity";
                case 0x434: return "Data Field: Temperature";
                case 0x435: return "Data Field: Wind Direction";
                case 0x436: return "Data Field: Wind Speed";
                case 0x437: return "Data Field: Air Quality Index";
                case 0x438: return "Data Field: Equivalent CO2";
                case 0x439: return "Data Field: Volatile Organic Compound Concentration";
                case 0x43A: return "Data Field: Object Presence";
                case 0x43B: return "Data Field: Object Proximity Range";
                case 0x43C: return "Data Field: Object Proximity Out of Range";
                case 0x440: return "Property: Environmental";
                case 0x441: return "Property: Reference Pressure";
                case 0x450: return "Data Field: Motion";
                case 0x451: return "Data Field: Motion State";
                case 0x452: return "Data Field: Acceleration";
                case 0x453: return "Data Field: Acceleration Axis X";
                case 0x454: return "Data Field: Acceleration Axis Y";
                case 0x455: return "Data Field: Acceleration Axis Z";
                case 0x456: return "Data Field: Angular Velocity";
                case 0x457: return "Data Field: Angular Velocity about X Axis";
                case 0x458: return "Data Field: Angular Velocity about Y Axis";
                case 0x459: return "Data Field: Angular Velocity about Z Axis";
                case 0x45A: return "Data Field: Angular Position";
                case 0x45B: return "Data Field: Angular Position about X Axis";
                case 0x45C: return "Data Field: Angular Position about Y Axis";
                case 0x45D: return "Data Field: Angular Position about Z Axis";
                case 0x45E: return "Data Field: Motion Speed";
                case 0x45F: return "Data Field: Motion Intensity";
                case 0x470: return "Data Field: Orientation";
                case 0x471: return "Data Field: Heading";
                case 0x472: return "Data Field: Heading X Axis";
                case 0x473: return "Data Field: Heading Y Axis";
                case 0x474: return "Data Field: Heading Z Axis";
                case 0x475: return "Data Field: Heading Compensated Magnetic North";
                case 0x476: return "Data Field: Heading Compensated True North";
                case 0x477: return "Data Field: Heading Magnetic North";
                case 0x478: return "Data Field: Heading True North";
                case 0x479: return "Data Field: Distance";
                case 0x47A: return "Data Field: Distance X Axis";
                case 0x47B: return "Data Field: Distance Y Axis";
                case 0x47C: return "Data Field: Distance Z Axis";
                case 0x47D: return "Data Field: Distance Out-of-Range";
                case 0x47E: return "Data Field: Tilt";
                case 0x47F: return "Data Field: Tilt X Axis";
                case 0x480: return "Data Field: Tilt Y Axis";
                case 0x481: return "Data Field: Tilt Z Axis";
                case 0x482: return "Data Field: Rotation Matrix";
                case 0x483: return "Data Field: Quaternion";
                case 0x484: return "Data Field: Magnetic Flux";
                case 0x485: return "Data Field: Magnetic Flux X Axis";
                case 0x486: return "Data Field: Magnetic Flux Y Axis";
                case 0x487: return "Data Field: Magnetic Flux Z Axis";
                case 0x488: return "Data Field: Magnetometer Accuracy";
                case 0x489: return "Data Field: Simple Orientation Direction";
                case 0x490: return "Data Field: Mechanical";
                case 0x491: return "Data Field: Boolean Switch State";
                case 0x492: return "Data Field: Boolean Switch Array States";
                case 0x493: return "Data Field: Multivalue Switch Value";
                case 0x494: return "Data Field: Force";
                case 0x495: return "Data Field: Absolute Pressure";
                case 0x496: return "Data Field: Gauge Pressure";
                case 0x497: return "Data Field: Strain";
                case 0x498: return "Data Field: Weight";
                case 0x4A0: return "Property: Mechanical";
                case 0x4A1: return "Property: Vibration State";
                case 0x4A2: return "Property: Forward Vibration Speed";
                case 0x4A3: return "Property: Backward Vibration Speed";
                case 0x4B0: return "Data Field: Biometric";
                case 0x4B1: return "Data Field: Human Presence";
                case 0x4B2: return "Data Field: Human Proximity Range";
                case 0x4B3: return "Data Field: Human Proximity Out of Range";
                case 0x4B4: return "Data Field: Human Touch State";
                case 0x4B5: return "Data Field: Blood Pressure";
                case 0x4B6: return "Data Field: Blood Pressure Diastolic";
                case 0x4B7: return "Data Field: Blood Pressure Systolic";
                case 0x4B8: return "Data Field: Heart Rate";
                case 0x4B9: return "Data Field: Resting Heart Rate";
                case 0x4BA: return "Data Field: Heartbeat Interval";
                case 0x4BB: return "Data Field: Respiratory Rate";
                case 0x4BC: return "Data Field: SpO2";
                case 0x4BD: return "Data Field: Human Attention Detected";
                case 0x4BE: return "Data Field: Human Head Azimuth";
                case 0x4BF: return "Data Field: Human Head Altitude";
                case 0x4C0: return "Data Field: Human Head Roll";
                case 0x4C1: return "Data Field: Human Head Pitch";
                case 0x4C2: return "Data Field: Human Head Yaw";
                case 0x4C3: return "Data Field: Human Correlation Id";
                case 0x4D0: return "Data Field: Light";
                case 0x4D1: return "Data Field: Illuminance";
                case 0x4D2: return "Data Field: Color Temperature";
                case 0x4D3: return "Data Field: Chromaticity";
                case 0x4D4: return "Data Field: Chromaticity X";
                case 0x4D5: return "Data Field: Chromaticity Y";
                case 0x4D6: return "Data Field: Consumer IR Sentence Receive";
                case 0x4D7: return "Data Field: Infrared Light";
                case 0x4D8: return "Data Field: Red Light";
                case 0x4D9: return "Data Field: Green Light";
                case 0x4DA: return "Data Field: Blue Light";
                case 0x4DB: return "Data Field: Ultraviolet A Light";
                case 0x4DC: return "Data Field: Ultraviolet B Light";
                case 0x4DD: return "Data Field: Ultraviolet Index";
                case 0x4DE: return "Data Field: Near Infrared Light";
                case 0x4DF: return "Property: Light";
                case 0x4E0: return "Property: Consumer IR Sentence Send";
                case 0x4E2: return "Property: Auto Brightness Preferred";
                case 0x4E3: return "Property: Auto Color Preferred";
                case 0x4F0: return "Data Field: Scanner";
                case 0x4F1: return "Data Field: RFID Tag 40 Bit";
                case 0x4F2: return "Data Field: NFC Sentence Receive";
                case 0x4F8: return "Property: Scanner";
                case 0x4F9: return "Property: NFC Sentence Send";
                case 0x500: return "Data Field: Electrical";
                case 0x501: return "Data Field: Capacitance";
                case 0x502: return "Data Field: Current";
                case 0x503: return "Data Field: Electrical Power";
                case 0x504: return "Data Field: Inductance";
                case 0x505: return "Data Field: Resistance";
                case 0x506: return "Data Field: Voltage";
                case 0x507: return "Data Field: Frequency";
                case 0x508: return "Data Field: Period";
                case 0x509: return "Data Field: Percent of Range";
                case 0x520: return "Data Field: Time";
                case 0x521: return "Data Field: Year";
                case 0x522: return "Data Field: Month";
                case 0x523: return "Data Field: Day";
                case 0x524: return "Data Field: Day of Week";
                case 0x525: return "Data Field: Hour";
                case 0x526: return "Data Field: Minute";
                case 0x527: return "Data Field: Second";
                case 0x528: return "Data Field: Millisecond";
                case 0x529: return "Data Field: Timestamp";
                case 0x52A: return "Data Field: Julian Day of Year";
                case 0x52B: return "Data Field: Time Since System Boot";
                case 0x530: return "Property: Time";
                case 0x531: return "Property: Time Zone Offset from UTC";
                case 0x532: return "Property: Time Zone Name";
                case 0x533: return "Property: Daylight Savings Time Observed";
                case 0x534: return "Property: Time Trim Adjustment";
                case 0x535: return "Property: Arm Alarm";
                case 0x540: return "Data Field: Custom";
                case 0x541: return "Data Field: Custom Usage";
                case 0x542: return "Data Field: Custom Boolean Array";
                case 0x543: return "Data Field: Custom Value";
                case 0x544: return "Data Field: Custom Value 1";
                case 0x545: return "Data Field: Custom Value 2";
                case 0x546: return "Data Field: Custom Value 3";
                case 0x547: return "Data Field: Custom Value 4";
                case 0x548: return "Data Field: Custom Value 5";
                case 0x549: return "Data Field: Custom Value 6";
                case 0x54A: return "Data Field: Custom Value 7";
                case 0x54B: return "Data Field: Custom Value 8";
                case 0x54C: return "Data Field: Custom Value 9";
                case 0x54D: return "Data Field: Custom Value 10";
                case 0x54E: return "Data Field: Custom Value 11";
                case 0x54F: return "Data Field: Custom Value 12";
                case 0x550: return "Data Field: Custom Value 13";
                case 0x551: return "Data Field: Custom Value 14";
                case 0x552: return "Data Field: Custom Value 15";
                case 0x553: return "Data Field: Custom Value 16";
                case 0x554: return "Data Field: Custom Value 17";
                case 0x555: return "Data Field: Custom Value 18";
                case 0x556: return "Data Field: Custom Value 19";
                case 0x557: return "Data Field: Custom Value 20";
                case 0x558: return "Data Field: Custom Value 21";
                case 0x559: return "Data Field: Custom Value 22";
                case 0x55A: return "Data Field: Custom Value 23";
                case 0x55B: return "Data Field: Custom Value 24";
                case 0x55C: return "Data Field: Custom Value 25";
                case 0x55D: return "Data Field: Custom Value 26";
                case 0x55E: return "Data Field: Custom Value 27";
                case 0x55F: return "Data Field: Custom Value 28";
                case 0x560: return "Data Field: Generic";
                case 0x561: return "Data Field: Generic GUID or PROPERTYKEY";
                case 0x562: return "Data Field: Generic Category GUID";
                case 0x563: return "Data Field: Generic Type GUID";
                case 0x564: return "Data Field: Generic Event PROPERTYKEY";
                case 0x565: return "Data Field: Generic Property PROPERTYKEY";
                case 0x566: return "Data Field: Generic Data Field PROPERTYKEY";
                case 0x567: return "Data Field: Generic Event";
                case 0x568: return "Data Field: Generic Property";
                case 0x569: return "Data Field: Generic Data Field";
                case 0x56A: return "Data Field: Enumerator Table Row Index";
                case 0x56B: return "Data Field: Enumerator Table Row Count";
                case 0x56C: return "Data Field: Generic GUID or PROPERTYKEY kind";
                case 0x56D: return "Data Field: Generic GUID";
                case 0x56E: return "Data Field: Generic PROPERTYKEY";
                case 0x56F: return "Data Field: Generic Top Level Collection ID";
                case 0x570: return "Data Field: Generic Report ID";
                case 0x571: return "Data Field: Generic Report Item Position Index";
                case 0x572: return "Data Field: Generic Firmware VARTYPE";
                case 0x573: return "Data Field: Generic Unit of Measure";
                case 0x574: return "Data Field: Generic Unit Exponent";
                case 0x575: return "Data Field: Generic Report Size";
                case 0x576: return "Data Field: Generic Report Count";
                case 0x580: return "Property: Generic";
                case 0x581: return "Property: Enumerator Table Row Index";
                case 0x582: return "Property: Enumerator Table Row Count";
                case 0x590: return "Data Field: Personal Activity";
                case 0x591: return "Data Field: Activity Type";
                case 0x592: return "Data Field: Activity State";
                case 0x593: return "Data Field: Device Position";
                case 0x594: return "Data Field: Step Count";
                case 0x595: return "Data Field: Step Count Reset";
                case 0x596: return "Data Field: Step Duration";
                case 0x597: return "Data Field: Step Type";
                case 0x5A0: return "Property: Minimum Activity Detection Interval";
                case 0x5A1: return "Property: Supported Activity Types";
                case 0x5A2: return "Property: Subscribed Activity Types";
                case 0x5A3: return "Property: Supported Step Types";
                case 0x5A4: return "Property: Subscribed Step Types";
                case 0x5A5: return "Property: Floor Height";
                case 0x5B0: return "Data Field: Custom Type ID";
                case 0x5C0: return "Property: Custom";
                case 0x5C1: return "Property: Custom Value 1";
                case 0x5C2: return "Property: Custom Value 2";
                case 0x5C3: return "Property: Custom Value 3";
                case 0x5C4: return "Property: Custom Value 4";
                case 0x5C5: return "Property: Custom Value 5";
                case 0x5C6: return "Property: Custom Value 6";
                case 0x5C7: return "Property: Custom Value 7";
                case 0x5C8: return "Property: Custom Value 8";
                case 0x5C9: return "Property: Custom Value 9";
                case 0x5CA: return "Property: Custom Value 10";
                case 0x5CB: return "Property: Custom Value 11";
                case 0x5CC: return "Property: Custom Value 12";
                case 0x5CD: return "Property: Custom Value 13";
                case 0x5CE: return "Property: Custom Value 14";
                case 0x5CF: return "Property: Custom Value 15";
                case 0x5D0: return "Property: Custom Value 16";
                case 0x5E0: return "Data Field: Hinge";
                case 0x5E1: return "Data Field: Hinge Angle";
                case 0x5F0: return "Data Field: Gesture Sensor";
                case 0x5F1: return "Data Field: Gesture State";
                case 0x5F2: return "Data Field: Hinge Fold Initial Angle";
                case 0x5F3: return "Data Field: Hinge Fold Final Angle";
                case 0x5F4: return "Data Field: Hinge Fold Contributing Panel";
                case 0x5F5: return "Data Field: Hinge Fold Type";
                case 0x800: return "Sensor State: Undefined";
                case 0x801: return "Sensor State: Ready";
                case 0x802: return "Sensor State: Not Available";
                case 0x803: return "Sensor State: No Data";
                case 0x804: return "Sensor State: Initializing";
                case 0x805: return "Sensor State: Access Denied";
                case 0x806: return "Sensor State: Error";
                case 0x810: return "Sensor Event: Unknown";
                case 0x811: return "Sensor Event: State Changed";
                case 0x812: return "Sensor Event: Property Changed";
                case 0x813: return "Sensor Event: Data Updated";
                case 0x814: return "Sensor Event: Poll Response";
                case 0x815: return "Sensor Event: Change Sensitivity";
                case 0x816: return "Sensor Event: Range Maximum Reached";
                case 0x817: return "Sensor Event: Range Minimum Reached";
                case 0x818: return "Sensor Event: High Threshold Cross Upward";
                case 0x819: return "Sensor Event: High Threshold Cross Downward";
                case 0x81A: return "Sensor Event: Low Threshold Cross Upward";
                case 0x81B: return "Sensor Event: Low Threshold Cross Downward";
                case 0x81C: return "Sensor Event: Zero Threshold Cross Upward";
                case 0x81D: return "Sensor Event: Zero Threshold Cross Downward";
                case 0x81E: return "Sensor Event: Period Exceeded";
                case 0x81F: return "Sensor Event: Frequency Exceeded";
                case 0x820: return "Sensor Event: Complex Trigger";
                case 0x830: return "Connection Type: PC Integrated";
                case 0x831: return "Connection Type: PC Attached";
                case 0x832: return "Connection Type: PC External";
                case 0x840: return "Reporting State: Report No Events";
                case 0x841: return "Reporting State: Report All Events";
                case 0x842: return "Reporting State: Report Threshold Events";
                case 0x843: return "Reporting State: Wake On No Events";
                case 0x844: return "Reporting State: Wake On All Events";
                case 0x845: return "Reporting State: Wake On Threshold Events";
                case 0x846: return "Reporting State: Anytime";
                case 0x850: return "Power State: Undefined";
                case 0x851: return "Power State: D0 Full Power";
                case 0x852: return "Power State: D1 Low Power";
                case 0x853: return "Power State: D2 Standby Power with Wakeup";
                case 0x854: return "Power State: D3 Sleep with Wakeup";
                case 0x855: return "Power State: D4 Power Off";
                case 0x860: return "Accuracy: Default";
                case 0x861: return "Accuracy: High";
                case 0x862: return "Accuracy: Medium";
                case 0x863: return "Accuracy: Low";
                case 0x870: return "Fix Quality: No Fix";
                case 0x871: return "Fix Quality: GPS";
                case 0x872: return "Fix Quality: DGPS";
                case 0x880: return "Fix Type: No Fix";
                case 0x881: return "Fix Type: GPS SPS Mode, Fix Valid";
                case 0x882: return "Fix Type: DGPS SPS Mode, Fix Valid";
                case 0x883: return "Fix Type: GPS PPS Mode, Fix Valid";
                case 0x884: return "Fix Type: Real Time Kinematic";
                case 0x885: return "Fix Type: Float RTK";
                case 0x886: return "Fix Type: Estimated (dead reckoned)";
                case 0x887: return "Fix Type: Manual Input Mode";
                case 0x888: return "Fix Type: Simulator Mode";
                case 0x890: return "GPS Operation Mode: Manual";
                case 0x891: return "GPS Operation Mode: Automatic";
                case 0x8A0: return "GPS Selection Mode: Autonomous";
                case 0x8A1: return "GPS Selection Mode: DGPS";
                case 0x8A2: return "GPS Selection Mode: Estimated (dead reckoned)";
                case 0x8A3: return "GPS Selection Mode: Manual Input";
                case 0x8A4: return "GPS Selection Mode: Simulator";
                case 0x8A5: return "GPS Selection Mode: Data Not Valid";
                case 0x8B0: return "GPS Status Data: Valid";
                case 0x8B1: return "GPS Status Data: Not Valid";
                case 0x8C0: return "Day of Week: Sunday";
                case 0x8C1: return "Day of Week: Monday";
                case 0x8C2: return "Day of Week: Tuesday";
                case 0x8C3: return "Day of Week: Wednesday";
                case 0x8C4: return "Day of Week: Thursday";
                case 0x8C5: return "Day of Week: Friday";
                case 0x8C6: return "Day of Week: Saturday";
                case 0x8D0: return "Kind: Category";
                case 0x8D1: return "Kind: Type";
                case 0x8D2: return "Kind: Event";
                case 0x8D3: return "Kind: Property";
                case 0x8D4: return "Kind: Data Field";
                case 0x8E0: return "Magnetometer Accuracy: Low";
                case 0x8E1: return "Magnetometer Accuracy: Medium";
                case 0x8E2: return "Magnetometer Accuracy: High";
                case 0x8F0: return "Simple Orientation Direction: Not Rotated";
                case 0x8F1: return "Simple Orientation Direction: Rotated 90 Degrees CCW";
                case 0x8F2: return "Simple Orientation Direction: Rotated 180 Degrees CCW";
                case 0x8F3: return "Simple Orientation Direction: Rotated 270 Degrees CCW";
                case 0x8F4: return "Simple Orientation Direction: Face Up";
                case 0x8F5: return "Simple Orientation Direction: Face Down";
                case 0x900: return "VT_NULL";
                case 0x901: return "VT_BOOL";
                case 0x902: return "VT_UI1";
                case 0x903: return "VT_I1";
                case 0x904: return "VT_UI2";
                case 0x905: return "VT_I2";
                case 0x906: return "VT_UI4";
                case 0x907: return "VT_I4";
                case 0x908: return "VT_UI8";
                case 0x909: return "VT_I8";
                case 0x90A: return "VT_R4";
                case 0x90B: return "VT_R8";
                case 0x90C: return "VT_WSTR";
                case 0x90D: return "VT_STR";
                case 0x90E: return "VT_CLSID";
                case 0x90F: return "VT_VECTOR VT_UI1";
                case 0x910: return "VT_F16E0";
                case 0x911: return "VT_F16E1";
                case 0x912: return "VT_F16E2";
                case 0x913: return "VT_F16E3";
                case 0x914: return "VT_F16E4";
                case 0x915: return "VT_F16E5";
                case 0x916: return "VT_F16E6";
                case 0x917: return "VT_F16E7";
                case 0x918: return "VT_F16E8";
                case 0x919: return "VT_F16E9";
                case 0x91A: return "VT_F16EA";
                case 0x91B: return "VT_F16EB";
                case 0x91C: return "VT_F16EC";
                case 0x91D: return "VT_F16ED";
                case 0x91E: return "VT_F16EE";
                case 0x91F: return "VT_F16EF";
                case 0x920: return "VT_F32E0";
                case 0x921: return "VT_F32E1";
                case 0x922: return "VT_F32E2";
                case 0x923: return "VT_F32E3";
                case 0x924: return "VT_F32E4";
                case 0x925: return "VT_F32E5";
                case 0x926: return "VT_F32E6";
                case 0x927: return "VT_F32E7";
                case 0x928: return "VT_F32E8";
                case 0x929: return "VT_F32E9";
                case 0x92A: return "VT_F32EA";
                case 0x92B: return "VT_F32EB";
                case 0x92C: return "VT_F32EC";
                case 0x92D: return "VT_F32ED";
                case 0x92E: return "VT_F32EE";
                case 0x92F: return "VT_F32EF";
                case 0x930: return "Activity Type: Unknown";
                case 0x931: return "Activity Type: Stationary";
                case 0x932: return "Activity Type: Fidgeting";
                case 0x933: return "Activity Type: Walking";
                case 0x934: return "Activity Type: Running";
                case 0x935: return "Activity Type: In Vehicle";
                case 0x936: return "Activity Type: Biking";
                case 0x937: return "Activity Type: Idle";
                case 0x940: return "Unit: Not Specified";
                case 0x941: return "Unit: Lux";
                case 0x942: return "Unit: Degrees Kelvin";
                case 0x943: return "Unit: Degrees Celsius";
                case 0x944: return "Unit: Pascal";
                case 0x945: return "Unit: Newton";
                case 0x946: return "Unit: Meters Second";
                case 0x947: return "Unit: Kilogram";
                case 0x948: return "Unit: Meter";
                case 0x949: return "Unit: Meters Second Second";
                case 0x94A: return "Unit: Farad";
                case 0x94B: return "Unit: Ampere";
                case 0x94C: return "Unit: Watt";
                case 0x94D: return "Unit: Henry";
                case 0x94E: return "Unit: Ohm";
                case 0x94F: return "Unit: Volt";
                case 0x950: return "Unit: Hertz";
                case 0x951: return "Unit: Bar";
                case 0x952: return "Unit: Degrees Anti-clockwise";
                case 0x953: return "Unit: Degrees Clockwise";
                case 0x954: return "Unit: Degrees";
                case 0x955: return "Unit: Degrees Second";
                case 0x956: return "Unit: Degrees Second Second";
                case 0x957: return "Unit: Knot";
                case 0x958: return "Unit: Percent";
                case 0x959: return "Unit: Second";
                case 0x95A: return "Unit: Millisecond";
                case 0x95B: return "Unit: G";
                case 0x95C: return "Unit: Bytes";
                case 0x95D: return "Unit: Milligauss";
                case 0x95E: return "Unit: Bits";
                case 0x960: return "Activity State: No State Change";
                case 0x961: return "Activity State: Start Activity";
                case 0x962: return "Activity State: End Activity";
                case 0x970: return "Exponent 0";
                case 0x971: return "Exponent 1";
                case 0x972: return "Exponent 2";
                case 0x973: return "Exponent 3";
                case 0x974: return "Exponent 4";
                case 0x975: return "Exponent 5";
                case 0x976: return "Exponent 6";
                case 0x977: return "Exponent 7";
                case 0x978: return "Exponent 8";
                case 0x979: return "Exponent 9";
                case 0x97A: return "Exponent A";
                case 0x97B: return "Exponent B";
                case 0x97C: return "Exponent C";
                case 0x97D: return "Exponent D";
                case 0x97E: return "Exponent E";
                case 0x97F: return "Exponent F";
                case 0x980: return "Device Position: Unknown";
                case 0x981: return "Device Position: Unchanged";
                case 0x982: return "Device Position: On Desk";
                case 0x983: return "Device Position: In Hand";
                case 0x984: return "Device Position: Moving in Bag";
                case 0x985: return "Device Position: Stationary in Bag";
                case 0x990: return "Step Type: Unknown";
                case 0x991: return "Step Type: Walking";
                case 0x992: return "Step Type: Running";
                case 0x9A0: return "Gesture State: Unknown";
                case 0x9A1: return "Gesture State: Started";
                case 0x9A2: return "Gesture State: Completed";
                case 0x9A3: return "Gesture State: Cancelled";
                case 0x9B0: return "Hinge Fold Contributing Panel: Unknown";
                case 0x9B1: return "Hinge Fold Contributing Panel: Panel 1";
                case 0x9B2: return "Hinge Fold Contributing Panel: Panel 2";
                case 0x9B3: return "Hinge Fold Contributing Panel: Both";
                case 0x9B4: return "Hinge Fold Type: Unknown";
                case 0x9B5: return "Hinge Fold Type: Increasing";
                case 0x9B6: return "Hinge Fold Type: Decreasing";
                case 0x9C0: return "Human Presence Detection Type: Vendor-Defined Non-Biometric";
                case 0x9C1: return "Human Presence Detection Type: Vendor-Defined Biometric";
                case 0x9C2: return "Human Presence Detection Type: Facial Biometric";
                case 0x9C3: return "Human Presence Detection Type: Audio Biometric";
                case 0x1000: return "Modifier: Change Sensitivity Absolute";
                case 0x2000: return "Modifier: Maximum";
                case 0x3000: return "Modifier: Minimum";
                case 0x4000: return "Modifier: Accuracy";
                case 0x5000: return "Modifier: Resolution";
                case 0x6000: return "Modifier: Threshold High";
                case 0x7000: return "Modifier: Threshold Low";
                case 0x8000: return "Modifier: Calibration Offset";
                case 0x9000: return "Modifier: Calibration Multiplier";
                case 0xA000: return "Modifier: Report Interval";
                case 0xB000: return "Modifier: Frequency Max";
                case 0xC000: return "Modifier: Period Max";
                case 0xD000: return "Modifier: Change Sensitivity Percent of Range";
                case 0xE000: return "Modifier: Change Sensitivity Percent Relative";
                default: return "Reserved";
            }
        case 0x40:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "Medical Ultrasound";
                case 0x20: return "VCR Acquisition";
                case 0x21: return "Freeze Thaw";
                case 0x22: return "Clip Store";
                case 0x23: return "Update";
                case 0x24: return "Next";
                case 0x25: return "Save";
                case 0x26: return "Print";
                case 0x27: return "Microphone Enable";
                case 0x40: return "Cine";
                case 0x41: return "Transmit Power";
                case 0x42: return "Volume";
                case 0x43: return "Focus";
                case 0x44: return "Depth";
                case 0x60: return "Soft Step - Primary";
                case 0x61: return "Soft Step - Secondary";
                case 0x70: return "Depth Gain Compensation";
                case 0x80: return "Zoom Select";
                case 0x81: return "Zoom Adjust";
                case 0x82: return "Spectral Doppler Mode Select";
                case 0x83: return "Spectral Doppler Adjust";
                case 0x84: return "Color Doppler Mode Select";
                case 0x85: return "Color Doppler Adjust";
                case 0x86: return "Motion Mode Select";
                case 0x87: return "Motion Mode Adjust";
                case 0x88: return "2-D Mode Select";
                case 0x89: return "2-D Mode Adjust";
                case 0xA0: return "Soft Control Select";
                case 0xA1: return "Soft Control Adjust";
                default: return "Reserved";
            }
        case 0x41:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "Braille Display";
                case 0x02: return "Braille Row";
                case 0x03: return "8 Dot Braille Cell";
                case 0x04: return "6 Dot Braille Cell";
                case 0x05: return "Number of Braille Cells";
                case 0x06: return "Screen Reader Control";
                case 0x07: return "Screen Reader Identifier";
                case 0xFA: return "Router Set 1";
                case 0xFB: return "Router Set 2";
                case 0xFC: return "Router Set 3";
                case 0x100: return "Router Key";
                case 0x101: return "Row Router Key";
                case 0x200: return "Braille Buttons";
                case 0x201: return "Braille Keyboard Dot 1";
                case 0x202: return "Braille Keyboard Dot 2";
                case 0x203: return "Braille Keyboard Dot 3";
                case 0x204: return "Braille Keyboard Dot 4";
                case 0x205: return "Braille Keyboard Dot 5";
                case 0x206: return "Braille Keyboard Dot 6";
                case 0x207: return "Braille Keyboard Dot 7";
                case 0x208: return "Braille Keyboard Dot 8";
                case 0x209: return "Braille Keyboard Space";
                case 0x20A: return "Braille Keyboard Left Space";
                case 0x20B: return "Braille Keyboard Right Space";
                case 0x20C: return "Braille Face Controls";
                case 0x20D: return "Braille Left Controls";
                case 0x20E: return "Braille Right Controls";
                case 0x20F: return "Braille Top Controls";
                case 0x210: return "Braille Joystick Center";
                case 0x211: return "Braille Joystick Up";
                case 0x212: return "Braille Joystick Down";
                case 0x213: return "Braille Joystick Left";
                case 0x214: return "Braille Joystick Right";
                case 0x215: return "Braille D-Pad Center";
                case 0x216: return "Braille D-Pad Up";
                case 0x217: return "Braille D-Pad Down";
                case 0x218: return "Braille D-Pad Left";
                case 0x219: return "Braille D-Pad Right";
                case 0x21A: return "Braille Pan Left";
                case 0x21B: return "Braille Pan Right";
                case 0x21C: return "Braille Rocker Up";
                case 0x21D: return "Braille Rocker Down";
                case 0x21E: return "Braille Rocker Press";
                default: return "Reserved";
            }
        case 0x59:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "LampArray";
                case 0x02: return "LampArrayAttributesReport";
                case 0x03: return "LampCount";
                case 0x04: return "BoundingBoxWidthInMicrometers";
                case 0x05: return "BoundingBoxHeightInMicrometers";
                case 0x06: return "BoundingBoxDepthInMicrometers";
                case 0x07: return "LampArrayKind";
                case 0x08: return "MinUpdateIntervalInMicroseconds";
                case 0x20: return "LampAttributesRequestReport";
                case 0x21: return "LampId";
                case 0x22: return "LampAttributesResponseReport";
                case 0x23: return "PositionXInMicrometers";
                case 0x24: return "PositionYInMicrometers";
                case 0x25: return "PositionZInMicrometers";
                case 0x26: return "LampPurposes";
                case 0x27: return "UpdateLatencyInMicroseconds";
                case 0x28: return "RedLevelCount";
                case 0x29: return "GreenLevelCount";
                case 0x2A: return "BlueLevelCount";
                case 0x2B: return "IntensityLevelCount";
                case 0x2C: return "IsProgrammable";
                case 0x2D: return "InputBinding";
                case 0x50: return "LampMultiUpdateReport";
                case 0x51: return "RedUpdateChannel";
                case 0x52: return "GreenUpdateChannel";
                case 0x53: return "BlueUpdateChannel";
                case 0x54: return "IntensityUpdateChannel";
                case 0x55: return "LampUpdateFlags";
                case 0x60: return "LampRangeUpdateReport";
                case 0x61: return "LampIdStart";
                case 0x62: return "LampIdEnd";
                case 0x70: return "LampArrayControlReport";
                case 0x71: return "AutonomousMode";
                default: return "Reserved";
            }
        case 0x80:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "Monitor Control";
                case 0x02: return "EDID Information";
                case 0x03: return "VDIF Information";
                case 0x04: return "VESA Version";
                default: return "Reserved";
            }
        case 0x81:
            switch (usageId) {
                case 0x00: return "Reserved";
                default: return `Enum ${usageId}`;
            }
        case 0x82:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "Degauss";
                case 0x10: return "Brightness";
                case 0x12: return "Contrast";
                case 0x16: return "Red Video Gain";
                case 0x18: return "Green Video Gain";
                case 0x1A: return "Blue Video Gain";
                case 0x1C: return "Focus";
                case 0x20: return "Horizontal Position";
                case 0x22: return "Horizontal Size";
                case 0x24: return "Horizontal Pincushion";
                case 0x26: return "Horizontal Pincushion Balance";
                case 0x28: return "Horizontal Misconvergence";
                case 0x2A: return "Horizontal Linearity";
                case 0x2C: return "Horizontal Linearity Balance";
                case 0x30: return "Vertical Position";
                case 0x32: return "Vertical Size";
                case 0x34: return "Vertical Pincushion";
                case 0x36: return "Vertical Pincushion Balance";
                case 0x38: return "Vertical Misconvergence";
                case 0x3A: return "Vertical Linearity";
                case 0x3C: return "Vertical Linearity Balance";
                case 0x40: return "Parallelogram Distortion (Key Balance)";
                case 0x42: return "Trapezoidal Distortion (Key)";
                case 0x44: return "Tilt (Rotation)";
                case 0x46: return "Top Corner Distortion Control";
                case 0x48: return "Top Corner Distortion Balance";
                case 0x4A: return "Bottom Corner Distortion Control";
                case 0x4C: return "Bottom Corner Distortion Balance";
                case 0x56: return "Horizontal Moiré";
                case 0x58: return "Vertical Moiré";
                case 0x5E: return "Input Level Select";
                case 0x60: return "Input Source Select";
                case 0x6C: return "Red Video Black Level";
                case 0x6E: return "Green Video Black Level";
                case 0x70: return "Blue Video Black Level";
                case 0xA2: return "Auto Size Center";
                case 0xA4: return "Polarity Horizontal Synchronization";
                case 0xA6: return "Polarity Vertical Synchronization";
                case 0xA8: return "Synchronization Type";
                case 0xAA: return "Screen Orientation";
                case 0xAC: return "Horizontal Frequency";
                case 0xAE: return "Vertical Frequency";
                case 0xB0: return "Settings";
                case 0xCA: return "On Screen Display";
                case 0xD4: return "Stereo Mode";
                default: return "Reserved";
            }
        case 0x84:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "iName";
                case 0x02: return "Present Status";
                case 0x03: return "Changed Status";
                case 0x04: return "UPS";
                case 0x05: return "Power Supply";
                case 0x10: return "Battery System";
                case 0x11: return "Battery System Id";
                case 0x12: return "Battery";
                case 0x13: return "Battery Id";
                case 0x14: return "Charger";
                case 0x15: return "Charger Id";
                case 0x16: return "Power Converter";
                case 0x17: return "Power Converter Id";
                case 0x18: return "Outlet System";
                case 0x19: return "Outlet System Id";
                case 0x1A: return "Input";
                case 0x1B: return "Input Id";
                case 0x1C: return "Output";
                case 0x1D: return "Output Id";
                case 0x1E: return "Flow";
                case 0x1F: return "Flow Id";
                case 0x20: return "Outlet";
                case 0x21: return "Outlet Id";
                case 0x22: return "Gang";
                case 0x23: return "Gang Id";
                case 0x24: return "Power Summary";
                case 0x25: return "Power Summary Id";
                case 0x30: return "Voltage";
                case 0x31: return "Current";
                case 0x32: return "Frequency";
                case 0x33: return "Apparent Power";
                case 0x34: return "Active Power";
                case 0x35: return "Percent Load";
                case 0x36: return "Temperature";
                case 0x37: return "Humidity";
                case 0x38: return "Bad Count";
                case 0x40: return "Config Voltage";
                case 0x41: return "Config Current";
                case 0x42: return "Config Frequency";
                case 0x43: return "Config Apparent Power";
                case 0x44: return "Config Active Power";
                case 0x45: return "Config Percent Load";
                case 0x46: return "Config Temperature";
                case 0x47: return "Config Humidity";
                case 0x50: return "Switch On Control";
                case 0x51: return "Switch Off Control";
                case 0x52: return "Toggle Control";
                case 0x53: return "Low Voltage Transfer";
                case 0x54: return "High Voltage Transfer";
                case 0x55: return "Delay Before Reboot";
                case 0x56: return "Delay Before Startup";
                case 0x57: return "Delay Before Shutdown";
                case 0x58: return "Test";
                case 0x59: return "Module Reset";
                case 0x5A: return "Audible Alarm Control";
                case 0x60: return "Present";
                case 0x61: return "Good";
                case 0x62: return "Internal Failure";
                case 0x63: return "Voltag Out Of Range";
                case 0x64: return "Frequency Out Of Range";
                case 0x65: return "Overload";
                case 0x66: return "Over Charged";
                case 0x67: return "Over Temperature";
                case 0x68: return "Shutdown Requested";
                case 0x69: return "Shutdown Imminent";
                case 0x6B: return "Switch On Off";
                case 0x6C: return "Switchable";
                case 0x6D: return "Used";
                case 0x6E: return "Boost";
                case 0x6F: return "Buck";
                case 0x70: return "Initialized";
                case 0x71: return "Tested";
                case 0x72: return "Awaiting Power";
                case 0x73: return "Communication Lost";
                case 0xFD: return "iManufacturer";
                case 0xFE: return "iProduct";
                case 0xFF: return "iSerialNumber";
                default: return "Reserved";
            }
        case 0x85:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "Smart Battery Battery Mode";
                case 0x02: return "Smart Battery Battery Status";
                case 0x03: return "Smart Battery Alarm Warning";
                case 0x04: return "Smart Battery Charger Mode";
                case 0x05: return "Smart Battery Charger Status";
                case 0x06: return "Smart Battery Charger Spec Info";
                case 0x07: return "Smart Battery Selector State";
                case 0x08: return "Smart Battery Selector Presets";
                case 0x09: return "Smart Battery Selector Info";
                case 0x10: return "Optional Mfg Function 1";
                case 0x11: return "Optional Mfg Function 2";
                case 0x12: return "Optional Mfg Function 3";
                case 0x13: return "Optional Mfg Function 4";
                case 0x14: return "Optional Mfg Function 5";
                case 0x15: return "Connection To SM Bus";
                case 0x16: return "Output Connection";
                case 0x17: return "Charger Connection";
                case 0x18: return "Battery Insertion";
                case 0x19: return "Use Next";
                case 0x1A: return "OK To Use";
                case 0x1B: return "Battery Supported";
                case 0x1C: return "Selector Revision";
                case 0x1D: return "Charging Indicator";
                case 0x28: return "Manufacturer Access";
                case 0x29: return "Remaining Capacity Limit";
                case 0x2A: return "Remaining Time Limit";
                case 0x2B: return "At Rate";
                case 0x2C: return "Capacity Mode";
                case 0x2D: return "Broadcast To Charger";
                case 0x2E: return "Primary Battery";
                case 0x2F: return "Charge Controller";
                case 0x40: return "Terminate Charge";
                case 0x41: return "Terminate Discharge";
                case 0x42: return "Below Remaining Capacity Limit";
                case 0x43: return "Remaining Time Limit Expired";
                case 0x44: return "Charging";
                case 0x45: return "Discharging";
                case 0x46: return "Fully Charged";
                case 0x47: return "Fully Discharged";
                case 0x48: return "Conditioning Flag";
                case 0x49: return "At Rate OK";
                case 0x4A: return "Smart Battery Error Code";
                case 0x4B: return "Need Replacement";
                case 0x60: return "At Rate Time To Full";
                case 0x61: return "At Rate Time To Empty";
                case 0x62: return "Average Current";
                case 0x63: return "Max Error";
                case 0x64: return "Relative State Of Charge";
                case 0x65: return "Absolute State Of Charge";
                case 0x66: return "Remaining Capacity";
                case 0x67: return "Full Charge Capacity";
                case 0x68: return "Run Time To Empty";
                case 0x69: return "Average Time To Empty";
                case 0x6A: return "Average Time To Full";
                case 0x6B: return "Cycle Count";
                case 0x80: return "Battery Pack Model Level";
                case 0x81: return "Internal Charge Controller";
                case 0x82: return "Primary Battery Support";
                case 0x83: return "Design Capacity";
                case 0x84: return "Specification Info";
                case 0x85: return "Manufacture Date";
                case 0x86: return "Serial Number";
                case 0x87: return "iManufacturer Name";
                case 0x88: return "iDevice Name";
                case 0x89: return "iDevice Chemistry";
                case 0x8A: return "Manufacturer Data";
                case 0x8B: return "Rechargable";
                case 0x8C: return "Warning Capacity Limit";
                case 0x8D: return "Capacity Granularity 1";
                case 0x8E: return "Capacity Granularity 2";
                case 0x8F: return "iOEM Information";
                case 0xC0: return "Inhibit Charge";
                case 0xC1: return "Enable Polling";
                case 0xC2: return "Reset To Zero";
                case 0xD0: return "AC Present";
                case 0xD1: return "Battery Present";
                case 0xD2: return "Power Fail";
                case 0xD3: return "Alarm Inhibited";
                case 0xD4: return "Thermistor Under Range";
                case 0xD5: return "Thermistor Hot";
                case 0xD6: return "Thermistor Cold";
                case 0xD7: return "Thermistor Over Range";
                case 0xD8: return "Voltage Out Of Range";
                case 0xD9: return "Current Out Of Range";
                case 0xDA: return "Current Not Regulated";
                case 0xDB: return "Voltage Not Regulated";
                case 0xDC: return "Master Mode";
                case 0xF0: return "Charger Selector Support";
                case 0xF1: return "Charger Spec";
                case 0xF2: return "Level 2";
                case 0xF3: return "Level 3";
                default: return "Reserved";
            }
        case 0x8C:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "Barcode Badge Reader";
                case 0x02: return "Barcode Scanner";
                case 0x03: return "Dumb Bar Code Scanner";
                case 0x04: return "Cordless Scanner Base";
                case 0x05: return "Bar Code Scanner Cradle";
                case 0x10: return "Attribute Report";
                case 0x11: return "Settings Report";
                case 0x12: return "Scanned Data Report";
                case 0x13: return "Raw Scanned Data Report";
                case 0x14: return "Trigger Report";
                case 0x15: return "Status Report";
                case 0x16: return "UPC EAN Control Report";
                case 0x17: return "EAN 2 3 Label Control Report";
                case 0x18: return "Code 39 Control Report";
                case 0x19: return "Interleaved 2 of 5 Control Report";
                case 0x1A: return "Standard 2 of 5 Control Report";
                case 0x1B: return "MSI Plessey Control Report";
                case 0x1C: return "Codabar Control Report";
                case 0x1D: return "Code 128 Control Report";
                case 0x1E: return "Misc 1D Control Report";
                case 0x1F: return "2D Control Report";
                case 0x30: return "Aiming Pointer Mode";
                case 0x31: return "Bar Code Present Sensor";
                case 0x32: return "Class 1A Laser";
                case 0x33: return "Class 2 Laser";
                case 0x34: return "Heater Present";
                case 0x35: return "Contact Scanner";
                case 0x36: return "Electronic Article Surveillance Notification";
                case 0x37: return "Constant Electronic Article Surveillance";
                case 0x38: return "Error Indication";
                case 0x39: return "Fixed Beeper";
                case 0x3A: return "Good Decode Indication";
                case 0x3B: return "Hands Free Scanning";
                case 0x3C: return "Intrinsically Safe";
                case 0x3D: return "Klasse Eins Laser";
                case 0x3E: return "Long Range Scanner";
                case 0x3F: return "Mirror Speed Control";
                case 0x40: return "Not On File Indication";
                case 0x41: return "Programmable Beeper";
                case 0x42: return "Triggerless";
                case 0x43: return "Wand";
                case 0x44: return "Water Resistant";
                case 0x45: return "Multi-Range Scanner";
                case 0x46: return "Proximity Sensor";
                case 0x4D: return "Fragment Decoding";
                case 0x4E: return "Scanner Read Confidence";
                case 0x4F: return "Data Prefix";
                case 0x50: return "Prefix AIMI";
                case 0x51: return "Prefix None";
                case 0x52: return "Prefix Proprietary";
                case 0x55: return "Active Time";
                case 0x56: return "Aiming Laser Pattern";
                case 0x57: return "Bar Code Present";
                case 0x58: return "Beeper State";
                case 0x59: return "Laser On Time";
                case 0x5A: return "Laser State";
                case 0x5B: return "Lockout Time";
                case 0x5C: return "Motor State";
                case 0x5D: return "Motor Timeout";
                case 0x5E: return "Power On Reset Scanner";
                case 0x5F: return "Prevent Read of Barcodes";
                case 0x60: return "Initiate Barcode Read";
                case 0x61: return "Trigger State";
                case 0x62: return "Trigger Mode";
                case 0x63: return "Trigger Mode Blinking Laser On";
                case 0x64: return "Trigger Mode Continuous Laser On";
                case 0x65: return "Trigger Mode Laser on while Pulled";
                case 0x66: return "Trigger Mode Laser stays on after release";
                case 0x6D: return "Commit Parameters to NVM";
                case 0x6E: return "Parameter Scanning";
                case 0x6F: return "Parameters Changed";
                case 0x70: return "Set parameter default values";
                case 0x75: return "Scanner In Cradle";
                case 0x76: return "Scanner In Range";
                case 0x7A: return "Aim Duration";
                case 0x7B: return "Good Read Lamp Duration";
                case 0x7C: return "Good Read Lamp Intensity";
                case 0x7D: return "Good Read LED";
                case 0x7E: return "Good Read Tone Frequency";
                case 0x7F: return "Good Read Tone Length";
                case 0x80: return "Good Read Tone Volume";
                case 0x82: return "No Read Message";
                case 0x83: return "Not on File Volume";
                case 0x84: return "Powerup Beep";
                case 0x85: return "Sound Error Beep";
                case 0x86: return "Sound Good Read Beep";
                case 0x87: return "Sound Not On File Beep";
                case 0x88: return "Good Read When to Write";
                case 0x89: return "GRWTI After Decode";
                case 0x8A: return "GRWTI Beep Lamp after transmit";
                case 0x8B: return "GRWTI No Beep Lamp use at all";
                case 0x91: return "Bookland EAN";
                case 0x92: return "Convert EAN 8 to 13 Type";
                case 0x93: return "Convert UPC A to EAN-13";
                case 0x94: return "Convert UPC-E to A";
                case 0x95: return "EAN-13";
                case 0x96: return "EAN-8";
                case 0x97: return "EAN-99 128 Mandatory";
                case 0x98: return "EAN-99 P5 128 Optional";
                case 0x99: return "Enable EAN Two Label";
                case 0x9A: return "UPC EAN";
                case 0x9B: return "UPC EAN Coupon Code";
                case 0x9C: return "UPC EAN Periodicals";
                case 0x9D: return "UPC-A";
                case 0x9E: return "UPC-A with 128 Mandatory";
                case 0x9F: return "UPC-A with 128 Optional";
                case 0xA0: return "UPC-A with P5 Optional";
                case 0xA1: return "UPC-E";
                case 0xA2: return "UPC-E1";
                case 0xA9: return "Periodical";
                case 0xAA: return "Periodical Auto-Discriminate +2";
                case 0xAB: return "Periodical Only Decode with +2";
                case 0xAC: return "Periodical Ignore +2";
                case 0xAD: return "Periodical Auto-Discriminate +5";
                case 0xAE: return "Periodical Only Decode with +5";
                case 0xAF: return "Periodical Ignore +5";
                case 0xB0: return "Check";
                case 0xB1: return "Check Disable Price";
                case 0xB2: return "Check Enable 4 digit Price";
                case 0xB3: return "Check Enable 5 digit Price";
                case 0xB4: return "Check Enable European 4 digit Price";
                case 0xB5: return "Check Enable European 5 digit Price";
                case 0xB7: return "EAN Two Label";
                case 0xB8: return "EAN Three Label";
                case 0xB9: return "EAN 8 Flag Digit 1";
                case 0xBA: return "EAN 8 Flag Digit 2";
                case 0xBB: return "EAN 8 Flag Digit 3";
                case 0xBC: return "EAN 13 Flag Digit 1";
                case 0xBD: return "EAN 13 Flag Digit 2";
                case 0xBE: return "EAN 13 Flag Digit 3";
                case 0xBF: return "Add EAN 2 3 Label Definition";
                case 0xC0: return "Clear all EAN 2 3 Label Definitions";
                case 0xC3: return "Codabar";
                case 0xC4: return "Code 128";
                case 0xC7: return "Code 39";
                case 0xC8: return "Code 93";
                case 0xC9: return "Full ASCII Conversion";
                case 0xCA: return "Interleaved 2 of 5";
                case 0xCB: return "Italian Pharmacy Code";
                case 0xCC: return "MSI Plessey";
                case 0xCD: return "Standard 2 of 5 IATA";
                case 0xCE: return "Standard 2 of 5";
                case 0xD3: return "Transmit Start Stop";
                case 0xD4: return "Tri-Optic";
                case 0xD5: return "UCC EAN-128";
                case 0xD6: return "Check Digit";
                case 0xD7: return "Check Digit Disable";
                case 0xD8: return "Check Digit Enable Interleaved 2 of 5 OPCC";
                case 0xD9: return "Check Digit Enable Interleaved 2 of 5 USS";
                case 0xDA: return "Check Digit Enable Standard 2 of 5 OPCC";
                case 0xDB: return "Check Digit Enable Standard 2 of 5 USS";
                case 0xDC: return "Check Digit Enable One MSI Plessey";
                case 0xDD: return "Check Digit Enable Two MSI Plessey";
                case 0xDE: return "Check Digit Codabar Enable";
                case 0xDF: return "Check Digit Code 39 Enable";
                case 0xF0: return "Transmit Check Digit";
                case 0xF1: return "Disable Check Digit Transmit";
                case 0xF2: return "Enable Check Digit Transmit";
                case 0xFB: return "Symbology Identifier 1";
                case 0xFC: return "Symbology Identifier 2";
                case 0xFD: return "Symbology Identifier 3";
                case 0xFE: return "Decoded Data";
                case 0xFF: return "Decode Data Continued";
                case 0x100: return "Bar Space Data";
                case 0x101: return "Scanner Data Accuracy";
                case 0x102: return "Raw Data Polarity";
                case 0x103: return "Polarity Inverted Bar Code";
                case 0x104: return "Polarity Normal Bar Code";
                case 0x106: return "Minimum Length to Decode";
                case 0x107: return "Maximum Length to Decode";
                case 0x108: return "Discrete Length to Decode 1";
                case 0x109: return "Discrete Length to Decode 2";
                case 0x10A: return "Data Length Method";
                case 0x10B: return "DL Method Read any";
                case 0x10C: return "DL Method Check in Range";
                case 0x10D: return "DL Method Check for Discrete";
                case 0x110: return "Aztec Code";
                case 0x111: return "BC412";
                case 0x112: return "Channel Code";
                case 0x113: return "Code 16";
                case 0x114: return "Code 32";
                case 0x115: return "Code 49";
                case 0x116: return "Code One";
                case 0x117: return "Colorcode";
                case 0x118: return "Data Matrix";
                case 0x119: return "MaxiCode";
                case 0x11A: return "MicroPDF";
                case 0x11B: return "PDF-417";
                case 0x11C: return "PosiCode";
                case 0x11D: return "QR Code";
                case 0x11E: return "SuperCode";
                case 0x11F: return "UltraCode";
                case 0x120: return "USD-5 (Slug Code)";
                case 0x121: return "VeriCode";
                default: return "Reserved";
            }
        case 0x8D:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "Scales";
                case 0x20: return "Scale Device";
                case 0x21: return "Scale Class";
                case 0x22: return "Scale Class I Metric";
                case 0x23: return "Scale Class II Metric";
                case 0x24: return "Scale Class III Metric";
                case 0x25: return "Scale Class IIIL Metric";
                case 0x26: return "Scale Class IV Metric";
                case 0x27: return "Scale Class III English";
                case 0x28: return "Scale Class IIIL English";
                case 0x29: return "Scale Class IV English";
                case 0x2A: return "Scale Class Generic";
                case 0x30: return "Scale Attribute Report";
                case 0x31: return "Scale Control Report";
                case 0x32: return "Scale Data Report";
                case 0x33: return "Scale Status Report";
                case 0x34: return "Scale Weight Limit Report";
                case 0x35: return "Scale Statistics Report";
                case 0x40: return "Data Weight";
                case 0x41: return "Data Scaling";
                case 0x50: return "Weight Unit";
                case 0x51: return "Weight Unit Milligram";
                case 0x52: return "Weight Unit Gram";
                case 0x53: return "Weight Unit Kilogram";
                case 0x54: return "Weight Unit Carats";
                case 0x55: return "Weight Unit Taels";
                case 0x56: return "Weight Unit Grains";
                case 0x57: return "Weight Unit Pennyweights";
                case 0x58: return "Weight Unit Metric Ton";
                case 0x59: return "Weight Unit Avoir Ton";
                case 0x5A: return "Weight Unit Troy Ounce";
                case 0x5B: return "Weight Unit Ounce";
                case 0x5C: return "Weight Unit Pound";
                case 0x60: return "Calibration Count";
                case 0x61: return "Re-Zero Count";
                case 0x70: return "Scale Status";
                case 0x71: return "Scale Status Fault";
                case 0x72: return "Scale Status Stable at Center of Zero";
                case 0x73: return "Scale Status In Motion";
                case 0x74: return "Scale Status Weight Stable";
                case 0x75: return "Scale Status Under Zero";
                case 0x76: return "Scale Status Over Weight Limit";
                case 0x77: return "Scale Status Requires Calibration";
                case 0x78: return "Scale Status Requires Rezeroing";
                case 0x80: return "Zero Scale";
                case 0x81: return "Enforced Zero Return";
                default: return "Reserved";
            }
        case 0x8E:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "MSR Device Read-Only";
                case 0x11: return "Track 1 Length";
                case 0x12: return "Track 2 Length";
                case 0x13: return "Track 3 Length";
                case 0x14: return "Track JIS Length";
                case 0x20: return "Track Data";
                case 0x21: return "Track 1 Data";
                case 0x22: return "Track 2 Data";
                case 0x23: return "Track 3 Data";
                case 0x24: return "Track JIS Data";
                default: return "Reserved";
            }
        case 0x90:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x20: return "Camera Auto-focus";
                case 0x21: return "Camera Shutter";
                default: return "Reserved";
            }
        case 0x91:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "General Purpose IO Card";
                case 0x02: return "Coin Door";
                case 0x03: return "Watchdog Timer";
                case 0x30: return "General Purpose Analog Input State";
                case 0x31: return "General Purpose Digital Input State";
                case 0x32: return "General Purpose Optical Input State";
                case 0x33: return "General Purpose Digital Output State";
                case 0x34: return "Number of Coin Doors";
                case 0x35: return "Coin Drawer Drop Count";
                case 0x36: return "Coin Drawer Start";
                case 0x37: return "Coin Drawer Service";
                case 0x38: return "Coin Drawer Tilt";
                case 0x39: return "Coin Door Test";
                case 0x40: return "Coin Door Lockout";
                case 0x41: return "Watchdog Timeout";
                case 0x42: return "Watchdog Action";
                case 0x43: return "Watchdog Reboot";
                case 0x44: return "Watchdog Restart";
                case 0x45: return "Alarm Input";
                case 0x46: return "Coin Door Counter";
                case 0x47: return "I O Direction Mapping";
                case 0x48: return "Set I O Direction Mapping";
                case 0x49: return "Extended Optical Input State";
                case 0x4A: return "Pin Pad Input State";
                case 0x4B: return "Pin Pad Status";
                case 0x4C: return "Pin Pad Output";
                case 0x4D: return "Pin Pad Command";
                default: return "Reserved";
            }
        case 0x92: break;
        case 0xF1D0:
            switch (usageId) {
                case 0x00: return "Undefined";
                case 0x01: return "U2F Authenticator Device";
                case 0x20: return "Input Report Data";
                case 0x21: return "Output Report Data";
                default: return "Reserved";
            }
        default:
            return null;
    }
}

function handleParts(byte, is_input) {
    const parts = [];

    parts.push((byte & 0x01) ? "Constant" : "Data");
    parts.push((byte & 0x02) ? "Variable" : "Array");
    parts.push((byte & 0x04) ? "Relative" : "Absolute");
    parts.push((byte & 0x08) ? "Wrap" : "No Wrap");
    parts.push((byte & 0x10) ? "Non Linear" : "Linear");
    parts.push((byte & 0x20) ? "No Preferred" : "Preferred State");
    parts.push((byte & 0x40) ? "Null state" : "No Null position");

    if (!is_input) {
        parts.push((byte & 0x80) ? "Volatile" : "Non Volatile");
    }

    parts.push((byte & 0x100) ? "Buffered Bytes" : "Bit Field");

    return parts.join(",");
}

function handleMainItem(bTag, bSize, bytes, i, opts, indent) {
    const b = bytes[i];
    const nBytes = (bSize === 3) ? 4 : (bSize ? bSize : 0);
    switch (bTag) {
        case 0xA: { // Collection
            const val = extractValue("Collection", bytes, i + 1, nBytes);
            const comment = `Collection (${collectionTypes[val] || val})`;
            const line = joinHex(b, val, opts, 1);
            return { text: line, comment, advance: 1 + nBytes, indentChange: 1 };
        }
        case 0xC: { // End Collection
            if (nBytes !== 0) {
                throw new Error(`End Collection: (0-byte arg) expected`);
            }
            const comment = "End Collection";
            const line = joinHex(b, null, opts, 0) + ",";
            return { text: line, comment, advance: 1, indentChange: -1 };
        }
        case 0x8: { // Input
            const val = extractValue("Input", bytes, i + 1, nBytes);
            const comment = `Input (${typeof val === 'number' ? handleParts(val, true) : 'no-data'})`;
            const line = joinHex(b, val, opts, 1);
            return { text: line, comment, advance: 1 + nBytes, indentChange: 0 };
        }
        case 0x9: { // Output
            const val = extractValue("Output", bytes, i + 1, nBytes);
            const comment = `Output (${typeof val === 'number' ? handleParts(val, false) : 'no-data'})`;
            const line = joinHex(b, val, opts, 1);
            return { text: line, comment, advance: 1 + nBytes, indentChange: 0 };
        }
        case 0xB: { // Feature
            const val = extractValue("Feature", bytes, i + 1, nBytes);
            const comment = `Feature (${typeof val === 'number' ? handleParts(val, false) : 'no-data'})`;
            const line = joinHex(b, val, opts, 1);
            return { text: line, comment, advance: 1 + nBytes, indentChange: 0 };
        }
        default: {
            throw new Error(`Unknown Main Item (tag 0x${bTag.toString(16)})`);
        }
    }
}

function extractValue(name, bytes, i, nBytes, signed = 1) {
    if (nBytes <= 0) {
        throw errDataExpected(name);
    }
    const val = readIntLE(bytes, i, nBytes, signed);
    if (val === undefined) {
        throw errUnexpectedEnd(name, nBytes);
    }
    return val;
}

function handleGlobalItem(bTag, bSize, bytes, i, opts) {
    const b = bytes[i];
    const nBytes = (bSize === 3) ? 4 : (bSize ? bSize : 0);
    switch (bTag) {
        case 0x00: { // Usage Page
            const val = extractValue("Usage Page", bytes, i + 1, nBytes, false);
            const comment = `Usage Page (${usagePages[val] || "Vendor Defined 0x" + (val !== undefined ? val.toString(16).toUpperCase() : "?")})`;
            const line = joinHex(b, val, opts, nBytes);
            return { text: line, comment, advance: 1 + nBytes, indentChange: 0, usagePage: val };
        }
        case 0x01: { // Logical Minimum
            const val = extractValue("Logical Minimum", bytes, i + 1, nBytes);
            const comment = `Logical Minimum (${val})`;
            const line = joinHex(b, val, opts, nBytes);
            return { text: line, comment, advance: 1 + nBytes, indentChange: 0 };
        }
        case 0x02: { // Logical Maximum
            const val = extractValue("Logical Maximum", bytes, i + 1, nBytes);
            const comment = `Logical Maximum (${val})`;
            const line = joinHex(b, val, opts, nBytes);
            return { text: line, comment, advance: 1 + nBytes, indentChange: 0 };
        }
        case 0x03: { // Physical Minimum
            const val = extractValue("Physical Minimum", bytes, i + 1, nBytes);
            const comment = `Physical Minimum (${val})`;
            const line = joinHex(b, val, opts, nBytes);
            return { text: line, comment, advance: 1 + nBytes, indentChange: 0 };
        }
        case 0x04: { // Physical Maximum
            const val = extractValue("Physical Maximum", bytes, i + 1, nBytes);
            const comment = `Physical Maximum (${val})`;
            const line = joinHex(b, val, opts, nBytes);
            return { text: line, comment, advance: 1 + nBytes, indentChange: 0 };
        }
        case 0x05: { // Unit Exponent
            const val = extractValue("Unit Exponent", bytes, i + 1, nBytes);
            const comment = `Unit Exponent (${val})`;
            const line = joinHex(b, val, opts, nBytes);
            return { text: line, comment, advance: 1 + nBytes, indentChange: 0 };
        }
        case 0x06: { // Unit
            const val = extractValue("Unit", bytes, i + 1, nBytes);
            const comment = `Unit (${val})`;
            const line = joinHex(b, val, opts, nBytes);
            return { text: line, comment, advance: 1 + nBytes, indentChange: 0 };
        }
        case 0x07: { // Report Size
            const val = extractValue("Report Size", bytes, i + 1, nBytes);
            const comment = `Report Size (${val})`;
            const line = joinHex(b, val, opts, nBytes);
            return { text: line, comment, advance: 1 + nBytes, indentChange: 0 };
        }
        case 0x08: { // Report ID (1 byte)
            if (nBytes !== 1) {
                throw new Error(`Report ID: (1-byte arg) expected`);
            }
            const val = bytes[i + 1];
            const comment = `Report ID (${val})`;
            const line = joinHex(b, val, opts, 1);
            return { text: line, comment, advance: 2, indentChange: 0 };
        }
        case 0x09: { // Report Count
            const val = extractValue("Report Count", bytes, i + 1, nBytes);
            const comment = `Report Count (${val})`;
            const line = joinHex(b, val, opts, nBytes);
            return { text: line, comment, advance: 1 + nBytes, indentChange: 0 };
        }
        case 0xA0: { // Push (0 bytes)
            if (nBytes <= 0) {
                throw new Error(`Push: (0-byte arg) expected`);
            }
            const comment = "Push";
            const line = joinHex([b], null, opts, 0) + ",";
            return { text: line, comment, advance: 1, indentChange: 0 };
        }
        case 0xB0: { // Pop (0 bytes)
            if (nBytes <= 0) {
                throw new Error(`Pop: (0-byte arg) expected`);
            }
            const comment = "Pop";
            const line = joinHex([b], null, opts, 0) + ",";
            return { text: line, comment, advance: 1, indentChange: 0 };
        }
        default: {
            throw new Error(`Unknown Global (${toHex(b, opts)})`);
        }
    }
}

function handleLocalItem(bTag, bSize, bytes, i, opts, usagePage) {
    const b = bytes[i];
    const nBytes = (bSize === 3) ? 4 : (bSize ? bSize : 0);
    switch (bTag) {
        case 0x00: { // Usage
            const val = extractValue("Usage", bytes, i + 1, nBytes, false);
            const comment = `Usage (${getUsage(usagePage, val) || joinHex(null, val, opts, nBytes)})`;
            const line = joinHex(b, val, opts, nBytes);
            return { text: line, comment, advance: 1 + nBytes, indentChange: 0 };
        }
        case 0x01: { // Usage Minimum
            const val = extractValue("Usage Minimum", bytes, i + 1, nBytes);
            const comment = `Usage Minimum (${val})`;
            const line = joinHex(b, val, opts, nBytes);
            return { text: line, comment, advance: 1 + nBytes, indentChange: 0 };
        }
        case 0x02: { // Usage Maximum
            const val = extractValue("Usage Maximum", bytes, i + 1, nBytes);
            const comment = `Usage Maximum (${val})`;
            const line = joinHex(b, val, opts, nBytes);
            return { text: line, comment, advance: 1 + nBytes, indentChange: 0 };
        }
        case 0x03: { // Designator Index
            const val = extractValue("Designator Index", bytes, i + 1, nBytes);
            const comment = `Designator Index (${val})`;
            const line = joinHex(b, val, opts, nBytes);
            return { text: line, comment, advance: 1 + nBytes, indentChange: 0 };
        }
        case 0x04: { // Designator Minimum
            const val = extractValue("Designator Minimum", bytes, i + 1, nBytes);
            const comment = `Designator Minimum (${val})`;
            const line = joinHex(b, val, opts, nBytes);
            return { text: line, comment, advance: 1 + nBytes, indentChange: 0 };
        }
        case 0x05: { // Designator Maximum
            const val = extractValue("Designator Maximum", bytes, i + 1, nBytes);
            const comment = `Designator Maximum (${val})`;
            const line = joinHex(b, val, opts, nBytes);
            return { text: line, comment, advance: 1 + nBytes, indentChange: 0 };
        }
        case 0x07: { // String Index
            const val = extractValue("String Index", bytes, i + 1, nBytes);
            const comment = `String Index (${val})`;
            const line = joinHex(b, val, opts, nBytes);
            return { text: line, comment, advance: 1 + nBytes, indentChange: 0 };
        }
        case 0x08: { // String Minimum
            const val = extractValue("String Minimum", bytes, i + 1, nBytes);
            const comment = `String Minimum (${val})`;
            const line = joinHex(b, val, opts, nBytes);
            return { text: line, comment, advance: 1 + nBytes, indentChange: 0 };
        }
        case 0x09: { // String Maximum
            const val = extractValue("String Maximum", bytes, i + 1, nBytes);
            const comment = `String Maximum (${val})`;
            const line = joinHex(b, val, opts, nBytes);
            return { text: line, comment, advance: 1 + nBytes, indentChange: 0 };
        }
        case 0x0A: { // Delimiter
            const val = extractValue("Delimiter", bytes, i + 1, nBytes);
            const comment = `Delimiter (${val})`;
            const line = joinHex(b, val, opts, nBytes);
            return { text: line, comment, advance: 1 + nBytes, indentChange: 0 };
        }
        default: {
            throw new Error(`Unknown Local (${toHex(b, opts)})`);
        }
    }
}

function handleShortItem(bytes, i, opts, indent, usagePage) {
    const b = bytes[i];
    const bSize = b & 0x03;
    const bType = (b >> 2) & 0x03;
    const bTag = (b >> 4) & 0x0F;

    switch (bType) {
        case 0:
            return handleMainItem(bTag, bSize, bytes, i, opts, indent);
        case 1:
            return handleGlobalItem(bTag, bSize, bytes, i, opts);
        case 2:
            return handleLocalItem(bTag, bSize, bytes, i, opts, usagePage);
        default:
            const comment = `Unknown (${toHex(b, opts)})`;
            const line = joinHex([b], opts) + ",";
            return { text: line, comment, advance: 1, indentChange: 0, error: true };
    }
}

export { handleShortItem };
